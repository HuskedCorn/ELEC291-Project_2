0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 27 13:09:50 2024
0000              5   ;--------------------------------------------------------
                  5   $name ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _SendATCommand
0000             30            public _waitms_or_RI1
0000             31            public _RXU1
0000             32            public _getstr1
0000             33            public _getchar1_with_timeout
0000             34            public _getchar1
0000             35            public _sendstr1
0000             36            public _putchar1
0000             37            public _UART1_Init
0000             38            public _Volts_at_Pin
0000             39            public _ADC_at_Pin
0000             40            public _InitPinADC
0000             41            public _waitms
0000             42            public _Timer3us
0000             43            public _InitADC
0000             44            public __c51_external_startup
0000             45            public _buff
0000             46   ;--------------------------------------------------------
0000             47   ; Special Function Registers
0000             48   ;--------------------------------------------------------
0000             49   _PAGE124        DATA 0xf7ff
0000             50   _ACC            DATA 0xe0
0000             51   _ADC0ASAH       DATA 0xb6
0000             52   _ADC0ASAL       DATA 0xb5
0000             53   _ADC0ASCF       DATA 0xa1
0000             54   _ADC0ASCT       DATA 0xc7
0000             55   _ADC0CF0        DATA 0xbc
0000             56   _ADC0CF1        DATA 0xb9
0000             57   _ADC0CF2        DATA 0xdf
0000             58   _ADC0CN0        DATA 0xe8
0000             59   _ADC0CN1        DATA 0xb2
0000             60   _ADC0CN2        DATA 0xb3
0000             61   _ADC0GTH        DATA 0xc4
0000             62   _ADC0GTL        DATA 0xc3
0000             63   _ADC0H          DATA 0xbe
0000             64   _ADC0L          DATA 0xbd
0000             65   _ADC0LTH        DATA 0xc6
0000             66   _ADC0LTL        DATA 0xc5
0000             67   _ADC0MX         DATA 0xbb
0000             68   _B              DATA 0xf0
0000             69   _CKCON0         DATA 0x8e
0000             70   _CKCON1         DATA 0xa6
0000             71   _CLEN0          DATA 0xc6
0000             72   _CLIE0          DATA 0xc7
0000             73   _CLIF0          DATA 0xe8
0000             74   _CLKSEL         DATA 0xa9
0000             75   _CLOUT0         DATA 0xd1
0000             76   _CLU0CF         DATA 0xb1
0000             77   _CLU0FN         DATA 0xaf
0000             78   _CLU0MX         DATA 0x84
0000             79   _CLU1CF         DATA 0xb3
0000             80   _CLU1FN         DATA 0xb2
0000             81   _CLU1MX         DATA 0x85
0000             82   _CLU2CF         DATA 0xb6
0000             83   _CLU2FN         DATA 0xb5
0000             84   _CLU2MX         DATA 0x91
0000             85   _CLU3CF         DATA 0xbf
0000             86   _CLU3FN         DATA 0xbe
0000             87   _CLU3MX         DATA 0xae
0000             88   _CMP0CN0        DATA 0x9b
0000             89   _CMP0CN1        DATA 0x99
0000             90   _CMP0MD         DATA 0x9d
0000             91   _CMP0MX         DATA 0x9f
0000             92   _CMP1CN0        DATA 0xbf
0000             93   _CMP1CN1        DATA 0xac
0000             94   _CMP1MD         DATA 0xab
0000             95   _CMP1MX         DATA 0xaa
0000             96   _CRC0CN0        DATA 0xce
0000             97   _CRC0CN1        DATA 0x86
0000             98   _CRC0CNT        DATA 0xd3
0000             99   _CRC0DAT        DATA 0xcb
0000            100   _CRC0FLIP       DATA 0xcf
0000            101   _CRC0IN         DATA 0xca
0000            102   _CRC0ST         DATA 0xd2
0000            103   _DAC0CF0        DATA 0x91
0000            104   _DAC0CF1        DATA 0x92
0000            105   _DAC0H          DATA 0x85
0000            106   _DAC0L          DATA 0x84
0000            107   _DAC1CF0        DATA 0x93
0000            108   _DAC1CF1        DATA 0x94
0000            109   _DAC1H          DATA 0x8a
0000            110   _DAC1L          DATA 0x89
0000            111   _DAC2CF0        DATA 0x95
0000            112   _DAC2CF1        DATA 0x96
0000            113   _DAC2H          DATA 0x8c
0000            114   _DAC2L          DATA 0x8b
0000            115   _DAC3CF0        DATA 0x9a
0000            116   _DAC3CF1        DATA 0x9c
0000            117   _DAC3H          DATA 0x8e
0000            118   _DAC3L          DATA 0x8d
0000            119   _DACGCF0        DATA 0x88
0000            120   _DACGCF1        DATA 0x98
0000            121   _DACGCF2        DATA 0xa2
0000            122   _DERIVID        DATA 0xad
0000            123   _DEVICEID       DATA 0xb5
0000            124   _DPH            DATA 0x83
0000            125   _DPL            DATA 0x82
0000            126   _EIE1           DATA 0xe6
0000            127   _EIE2           DATA 0xf3
0000            128   _EIP1           DATA 0xbb
0000            129   _EIP1H          DATA 0xee
0000            130   _EIP2           DATA 0xed
0000            131   _EIP2H          DATA 0xf6
0000            132   _EMI0CN         DATA 0xe7
0000            133   _FLKEY          DATA 0xb7
0000            134   _HFO0CAL        DATA 0xc7
0000            135   _HFO1CAL        DATA 0xd6
0000            136   _HFOCN          DATA 0xef
0000            137   _I2C0ADM        DATA 0xff
0000            138   _I2C0CN0        DATA 0xba
0000            139   _I2C0DIN        DATA 0xbc
0000            140   _I2C0DOUT       DATA 0xbb
0000            141   _I2C0FCN0       DATA 0xad
0000            142   _I2C0FCN1       DATA 0xab
0000            143   _I2C0FCT        DATA 0xf5
0000            144   _I2C0SLAD       DATA 0xbd
0000            145   _I2C0STAT       DATA 0xb9
0000            146   _IE             DATA 0xa8
0000            147   _IP             DATA 0xb8
0000            148   _IPH            DATA 0xf2
0000            149   _IT01CF         DATA 0xe4
0000            150   _LFO0CN         DATA 0xb1
0000            151   _P0             DATA 0x80
0000            152   _P0MASK         DATA 0xfe
0000            153   _P0MAT          DATA 0xfd
0000            154   _P0MDIN         DATA 0xf1
0000            155   _P0MDOUT        DATA 0xa4
0000            156   _P0SKIP         DATA 0xd4
0000            157   _P1             DATA 0x90
0000            158   _P1MASK         DATA 0xee
0000            159   _P1MAT          DATA 0xed
0000            160   _P1MDIN         DATA 0xf2
0000            161   _P1MDOUT        DATA 0xa5
0000            162   _P1SKIP         DATA 0xd5
0000            163   _P2             DATA 0xa0
0000            164   _P2MASK         DATA 0xfc
0000            165   _P2MAT          DATA 0xfb
0000            166   _P2MDIN         DATA 0xf3
0000            167   _P2MDOUT        DATA 0xa6
0000            168   _P2SKIP         DATA 0xcc
0000            169   _P3             DATA 0xb0
0000            170   _P3MDIN         DATA 0xf4
0000            171   _P3MDOUT        DATA 0x9c
0000            172   _PCA0CENT       DATA 0x9e
0000            173   _PCA0CLR        DATA 0x9c
0000            174   _PCA0CN0        DATA 0xd8
0000            175   _PCA0CPH0       DATA 0xfc
0000            176   _PCA0CPH1       DATA 0xea
0000            177   _PCA0CPH2       DATA 0xec
0000            178   _PCA0CPH3       DATA 0xf5
0000            179   _PCA0CPH4       DATA 0x85
0000            180   _PCA0CPH5       DATA 0xde
0000            181   _PCA0CPL0       DATA 0xfb
0000            182   _PCA0CPL1       DATA 0xe9
0000            183   _PCA0CPL2       DATA 0xeb
0000            184   _PCA0CPL3       DATA 0xf4
0000            185   _PCA0CPL4       DATA 0x84
0000            186   _PCA0CPL5       DATA 0xdd
0000            187   _PCA0CPM0       DATA 0xda
0000            188   _PCA0CPM1       DATA 0xdb
0000            189   _PCA0CPM2       DATA 0xdc
0000            190   _PCA0CPM3       DATA 0xae
0000            191   _PCA0CPM4       DATA 0xaf
0000            192   _PCA0CPM5       DATA 0xcc
0000            193   _PCA0H          DATA 0xfa
0000            194   _PCA0L          DATA 0xf9
0000            195   _PCA0MD         DATA 0xd9
0000            196   _PCA0POL        DATA 0x96
0000            197   _PCA0PWM        DATA 0xf7
0000            198   _PCON0          DATA 0x87
0000            199   _PCON1          DATA 0xcd
0000            200   _PFE0CN         DATA 0xc1
0000            201   _PRTDRV         DATA 0xf6
0000            202   _PSCTL          DATA 0x8f
0000            203   _PSTAT0         DATA 0xaa
0000            204   _PSW            DATA 0xd0
0000            205   _REF0CN         DATA 0xd1
0000            206   _REG0CN         DATA 0xc9
0000            207   _REVID          DATA 0xb6
0000            208   _RSTSRC         DATA 0xef
0000            209   _SBCON1         DATA 0x94
0000            210   _SBRLH1         DATA 0x96
0000            211   _SBRLL1         DATA 0x95
0000            212   _SBUF           DATA 0x99
0000            213   _SBUF0          DATA 0x99
0000            214   _SBUF1          DATA 0x92
0000            215   _SCON           DATA 0x98
0000            216   _SCON0          DATA 0x98
0000            217   _SCON1          DATA 0xc8
0000            218   _SFRPAGE        DATA 0xa7
0000            219   _SFRPGCN        DATA 0xbc
0000            220   _SFRSTACK       DATA 0xd7
0000            221   _SMB0ADM        DATA 0xd6
0000            222   _SMB0ADR        DATA 0xd7
0000            223   _SMB0CF         DATA 0xc1
0000            224   _SMB0CN0        DATA 0xc0
0000            225   _SMB0DAT        DATA 0xc2
0000            226   _SMB0FCN0       DATA 0xc3
0000            227   _SMB0FCN1       DATA 0xc4
0000            228   _SMB0FCT        DATA 0xef
0000            229   _SMB0RXLN       DATA 0xc5
0000            230   _SMB0TC         DATA 0xac
0000            231   _SMOD1          DATA 0x93
0000            232   _SP             DATA 0x81
0000            233   _SPI0CFG        DATA 0xa1
0000            234   _SPI0CKR        DATA 0xa2
0000            235   _SPI0CN0        DATA 0xf8
0000            236   _SPI0DAT        DATA 0xa3
0000            237   _SPI0FCN0       DATA 0x9a
0000            238   _SPI0FCN1       DATA 0x9b
0000            239   _SPI0FCT        DATA 0xf7
0000            240   _SPI0PCF        DATA 0xdf
0000            241   _TCON           DATA 0x88
0000            242   _TH0            DATA 0x8c
0000            243   _TH1            DATA 0x8d
0000            244   _TL0            DATA 0x8a
0000            245   _TL1            DATA 0x8b
0000            246   _TMOD           DATA 0x89
0000            247   _TMR2CN0        DATA 0xc8
0000            248   _TMR2CN1        DATA 0xfd
0000            249   _TMR2H          DATA 0xcf
0000            250   _TMR2L          DATA 0xce
0000            251   _TMR2RLH        DATA 0xcb
0000            252   _TMR2RLL        DATA 0xca
0000            253   _TMR3CN0        DATA 0x91
0000            254   _TMR3CN1        DATA 0xfe
0000            255   _TMR3H          DATA 0x95
0000            256   _TMR3L          DATA 0x94
0000            257   _TMR3RLH        DATA 0x93
0000            258   _TMR3RLL        DATA 0x92
0000            259   _TMR4CN0        DATA 0x98
0000            260   _TMR4CN1        DATA 0xff
0000            261   _TMR4H          DATA 0xa5
0000            262   _TMR4L          DATA 0xa4
0000            263   _TMR4RLH        DATA 0xa3
0000            264   _TMR4RLL        DATA 0xa2
0000            265   _TMR5CN0        DATA 0xc0
0000            266   _TMR5CN1        DATA 0xf1
0000            267   _TMR5H          DATA 0xd5
0000            268   _TMR5L          DATA 0xd4
0000            269   _TMR5RLH        DATA 0xd3
0000            270   _TMR5RLL        DATA 0xd2
0000            271   _UART0PCF       DATA 0xd9
0000            272   _UART1FCN0      DATA 0x9d
0000            273   _UART1FCN1      DATA 0xd8
0000            274   _UART1FCT       DATA 0xfa
0000            275   _UART1LIN       DATA 0x9e
0000            276   _UART1PCF       DATA 0xda
0000            277   _VDM0CN         DATA 0xff
0000            278   _WDTCN          DATA 0x97
0000            279   _XBR0           DATA 0xe1
0000            280   _XBR1           DATA 0xe2
0000            281   _XBR2           DATA 0xe3
0000            282   _XOSC0CN        DATA 0x86
0000            283   _DPTR           DATA 0x8382
0000            284   _TMR2RL         DATA 0xcbca
0000            285   _TMR3RL         DATA 0x9392
0000            286   _TMR4RL         DATA 0xa3a2
0000            287   _TMR5RL         DATA 0xd3d2
0000            288   _TMR0           DATA 0x8c8a
0000            289   _TMR1           DATA 0x8d8b
0000            290   _TMR2           DATA 0xcfce
0000            291   _TMR3           DATA 0x9594
0000            292   _TMR4           DATA 0xa5a4
0000            293   _TMR5           DATA 0xd5d4
0000            294   _SBRL1          DATA 0x9695
0000            295   _PCA0           DATA 0xfaf9
0000            296   _PCA0CP0        DATA 0xfcfb
0000            297   _PCA0CP1        DATA 0xeae9
0000            298   _PCA0CP2        DATA 0xeceb
0000            299   _PCA0CP3        DATA 0xf5f4
0000            300   _PCA0CP4        DATA 0x8584
0000            301   _PCA0CP5        DATA 0xdedd
0000            302   _ADC0ASA        DATA 0xb6b5
0000            303   _ADC0GT         DATA 0xc4c3
0000            304   _ADC0           DATA 0xbebd
0000            305   _ADC0LT         DATA 0xc6c5
0000            306   _DAC0           DATA 0x8584
0000            307   _DAC1           DATA 0x8a89
0000            308   _DAC2           DATA 0x8c8b
0000            309   _DAC3           DATA 0x8e8d
0000            310   ;--------------------------------------------------------
0000            311   ; special function bits
0000            312   ;--------------------------------------------------------
0000            313   _ACC_0          BIT 0xe0
0000            314   _ACC_1          BIT 0xe1
0000            315   _ACC_2          BIT 0xe2
0000            316   _ACC_3          BIT 0xe3
0000            317   _ACC_4          BIT 0xe4
0000            318   _ACC_5          BIT 0xe5
0000            319   _ACC_6          BIT 0xe6
0000            320   _ACC_7          BIT 0xe7
0000            321   _TEMPE          BIT 0xe8
0000            322   _ADGN0          BIT 0xe9
0000            323   _ADGN1          BIT 0xea
0000            324   _ADWINT         BIT 0xeb
0000            325   _ADBUSY         BIT 0xec
0000            326   _ADINT          BIT 0xed
0000            327   _IPOEN          BIT 0xee
0000            328   _ADEN           BIT 0xef
0000            329   _B_0            BIT 0xf0
0000            330   _B_1            BIT 0xf1
0000            331   _B_2            BIT 0xf2
0000            332   _B_3            BIT 0xf3
0000            333   _B_4            BIT 0xf4
0000            334   _B_5            BIT 0xf5
0000            335   _B_6            BIT 0xf6
0000            336   _B_7            BIT 0xf7
0000            337   _C0FIF          BIT 0xe8
0000            338   _C0RIF          BIT 0xe9
0000            339   _C1FIF          BIT 0xea
0000            340   _C1RIF          BIT 0xeb
0000            341   _C2FIF          BIT 0xec
0000            342   _C2RIF          BIT 0xed
0000            343   _C3FIF          BIT 0xee
0000            344   _C3RIF          BIT 0xef
0000            345   _D1SRC0         BIT 0x88
0000            346   _D1SRC1         BIT 0x89
0000            347   _D1AMEN         BIT 0x8a
0000            348   _D01REFSL       BIT 0x8b
0000            349   _D3SRC0         BIT 0x8c
0000            350   _D3SRC1         BIT 0x8d
0000            351   _D3AMEN         BIT 0x8e
0000            352   _D23REFSL       BIT 0x8f
0000            353   _D0UDIS         BIT 0x98
0000            354   _D1UDIS         BIT 0x99
0000            355   _D2UDIS         BIT 0x9a
0000            356   _D3UDIS         BIT 0x9b
0000            357   _EX0            BIT 0xa8
0000            358   _ET0            BIT 0xa9
0000            359   _EX1            BIT 0xaa
0000            360   _ET1            BIT 0xab
0000            361   _ES0            BIT 0xac
0000            362   _ET2            BIT 0xad
0000            363   _ESPI0          BIT 0xae
0000            364   _EA             BIT 0xaf
0000            365   _PX0            BIT 0xb8
0000            366   _PT0            BIT 0xb9
0000            367   _PX1            BIT 0xba
0000            368   _PT1            BIT 0xbb
0000            369   _PS0            BIT 0xbc
0000            370   _PT2            BIT 0xbd
0000            371   _PSPI0          BIT 0xbe
0000            372   _P0_0           BIT 0x80
0000            373   _P0_1           BIT 0x81
0000            374   _P0_2           BIT 0x82
0000            375   _P0_3           BIT 0x83
0000            376   _P0_4           BIT 0x84
0000            377   _P0_5           BIT 0x85
0000            378   _P0_6           BIT 0x86
0000            379   _P0_7           BIT 0x87
0000            380   _P1_0           BIT 0x90
0000            381   _P1_1           BIT 0x91
0000            382   _P1_2           BIT 0x92
0000            383   _P1_3           BIT 0x93
0000            384   _P1_4           BIT 0x94
0000            385   _P1_5           BIT 0x95
0000            386   _P1_6           BIT 0x96
0000            387   _P1_7           BIT 0x97
0000            388   _P2_0           BIT 0xa0
0000            389   _P2_1           BIT 0xa1
0000            390   _P2_2           BIT 0xa2
0000            391   _P2_3           BIT 0xa3
0000            392   _P2_4           BIT 0xa4
0000            393   _P2_5           BIT 0xa5
0000            394   _P2_6           BIT 0xa6
0000            395   _P3_0           BIT 0xb0
0000            396   _P3_1           BIT 0xb1
0000            397   _P3_2           BIT 0xb2
0000            398   _P3_3           BIT 0xb3
0000            399   _P3_4           BIT 0xb4
0000            400   _P3_7           BIT 0xb7
0000            401   _CCF0           BIT 0xd8
0000            402   _CCF1           BIT 0xd9
0000            403   _CCF2           BIT 0xda
0000            404   _CCF3           BIT 0xdb
0000            405   _CCF4           BIT 0xdc
0000            406   _CCF5           BIT 0xdd
0000            407   _CR             BIT 0xde
0000            408   _CF             BIT 0xdf
0000            409   _PARITY         BIT 0xd0
0000            410   _F1             BIT 0xd1
0000            411   _OV             BIT 0xd2
0000            412   _RS0            BIT 0xd3
0000            413   _RS1            BIT 0xd4
0000            414   _F0             BIT 0xd5
0000            415   _AC             BIT 0xd6
0000            416   _CY             BIT 0xd7
0000            417   _RI             BIT 0x98
0000            418   _TI             BIT 0x99
0000            419   _RB8            BIT 0x9a
0000            420   _TB8            BIT 0x9b
0000            421   _REN            BIT 0x9c
0000            422   _CE             BIT 0x9d
0000            423   _SMODE          BIT 0x9e
0000            424   _RI1            BIT 0xc8
0000            425   _TI1            BIT 0xc9
0000            426   _RBX1           BIT 0xca
0000            427   _TBX1           BIT 0xcb
0000            428   _REN1           BIT 0xcc
0000            429   _PERR1          BIT 0xcd
0000            430   _OVR1           BIT 0xce
0000            431   _SI             BIT 0xc0
0000            432   _ACK            BIT 0xc1
0000            433   _ARBLOST        BIT 0xc2
0000            434   _ACKRQ          BIT 0xc3
0000            435   _STO            BIT 0xc4
0000            436   _STA            BIT 0xc5
0000            437   _TXMODE         BIT 0xc6
0000            438   _MASTER         BIT 0xc7
0000            439   _SPIEN          BIT 0xf8
0000            440   _TXNF           BIT 0xf9
0000            441   _NSSMD0         BIT 0xfa
0000            442   _NSSMD1         BIT 0xfb
0000            443   _RXOVRN         BIT 0xfc
0000            444   _MODF           BIT 0xfd
0000            445   _WCOL           BIT 0xfe
0000            446   _SPIF           BIT 0xff
0000            447   _IT0            BIT 0x88
0000            448   _IE0            BIT 0x89
0000            449   _IT1            BIT 0x8a
0000            450   _IE1            BIT 0x8b
0000            451   _TR0            BIT 0x8c
0000            452   _TF0            BIT 0x8d
0000            453   _TR1            BIT 0x8e
0000            454   _TF1            BIT 0x8f
0000            455   _T2XCLK0        BIT 0xc8
0000            456   _T2XCLK1        BIT 0xc9
0000            457   _TR2            BIT 0xca
0000            458   _T2SPLIT        BIT 0xcb
0000            459   _TF2CEN         BIT 0xcc
0000            460   _TF2LEN         BIT 0xcd
0000            461   _TF2L           BIT 0xce
0000            462   _TF2H           BIT 0xcf
0000            463   _T4XCLK0        BIT 0x98
0000            464   _T4XCLK1        BIT 0x99
0000            465   _TR4            BIT 0x9a
0000            466   _T4SPLIT        BIT 0x9b
0000            467   _TF4CEN         BIT 0x9c
0000            468   _TF4LEN         BIT 0x9d
0000            469   _TF4L           BIT 0x9e
0000            470   _TF4H           BIT 0x9f
0000            471   _T5XCLK0        BIT 0xc0
0000            472   _T5XCLK1        BIT 0xc1
0000            473   _TR5            BIT 0xc2
0000            474   _T5SPLIT        BIT 0xc3
0000            475   _TF5CEN         BIT 0xc4
0000            476   _TF5LEN         BIT 0xc5
0000            477   _TF5L           BIT 0xc6
0000            478   _TF5H           BIT 0xc7
0000            479   _RIE            BIT 0xd8
0000            480   _RXTO0          BIT 0xd9
0000            481   _RXTO1          BIT 0xda
0000            482   _RFRQ           BIT 0xdb
0000            483   _TIE            BIT 0xdc
0000            484   _TXHOLD         BIT 0xdd
0000            485   _TXNF1          BIT 0xde
0000            486   _TFRQ           BIT 0xdf
0000            487   ;--------------------------------------------------------
0000            488   ; overlayable register banks
0000            489   ;--------------------------------------------------------
0000            490            rbank0 segment data overlay
0000            491   ;--------------------------------------------------------
0000            492   ; internal ram data
0000            493   ;--------------------------------------------------------
0000            494            rseg R_DSEG
0000            495   _main_v_1_125:
0000            496            ds 8
0008            497   _main_vRef_1_125:
0008            498            ds 4
000C            499   _main_sloc0_1_0:
000C            500            ds 4
0010            501   ;--------------------------------------------------------
0010            502   ; overlayable items in internal ram 
0010            503   ;--------------------------------------------------------
0000            504            rseg    R_OSEG
0000            505            rseg    R_OSEG
0000            506   _InitPinADC_PARM_2:
0000            507            ds 1
0001            508            rseg    R_OSEG
0001            509            rseg    R_OSEG
0001            510            rseg    R_OSEG
0001            511   ;--------------------------------------------------------
0001            512   ; indirectly addressable internal ram data
0001            513   ;--------------------------------------------------------
0000            514            rseg R_ISEG
0000            515   _buff:
0000            516            ds 20
0014            517   ;--------------------------------------------------------
0014            518   ; absolute internal ram data
0014            519   ;--------------------------------------------------------
0000            520            DSEG
0000            521   ;--------------------------------------------------------
0000            522   ; bit data
0000            523   ;--------------------------------------------------------
0000            524            rseg R_BSEG
0000            525   ;--------------------------------------------------------
0000            526   ; paged external ram data
0000            527   ;--------------------------------------------------------
0000            528            rseg R_PSEG
0000            529   ;--------------------------------------------------------
0000            530   ; external ram data
0000            531   ;--------------------------------------------------------
0000            532            rseg R_XSEG
0000            533   ;--------------------------------------------------------
0000            534   ; absolute external ram data
0000            535   ;--------------------------------------------------------
0000            536            XSEG
0000            537   ;--------------------------------------------------------
0000            538   ; external initialized ram data
0000            539   ;--------------------------------------------------------
0000            540            rseg R_IXSEG
0000            541            rseg R_HOME
0000            542            rseg R_GSINIT
0000            543            rseg R_CSEG
0000            544   ;--------------------------------------------------------
0000            545   ; Reset entry point and interrupt vectors
0000            546   ;--------------------------------------------------------
0000            547            CSEG at 0x0000
0000 020000     548            ljmp    _crt0
0003            549   ;--------------------------------------------------------
0003            550   ; global & static initialisations
0003            551   ;--------------------------------------------------------
0000            552            rseg R_HOME
0000            553            rseg R_GSINIT
0000            554            rseg R_GSINIT
0000            555   ;--------------------------------------------------------
0000            556   ; data variables initialization
0000            557   ;--------------------------------------------------------
0000            558            rseg R_DINIT
0000            559            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            560   ;--------------------------------------------------------
0000            561   ; code
0000            562   ;--------------------------------------------------------
0000            563            rseg R_CSEG
0000            564   ;------------------------------------------------------------
0000            565   ;Allocation info for local variables in function '_c51_external_startup'
0000            566   ;------------------------------------------------------------
0000            567   ;------------------------------------------------------------
0000            568   ;        ADC.c:21: char _c51_external_startup (void)
0000            569   ;        -----------------------------------------
0000            570   ;         function _c51_external_startup
0000            571   ;        -----------------------------------------
0000            572   __c51_external_startup:
0000            573            using   0
0000            574   ;        ADC.c:24: SFRPAGE = 0x00;
0000 75A700     575            mov     _SFRPAGE,#0x00
0003            576   ;        ADC.c:25: WDTCN = 0xDE; //First key
0003 7597DE     577            mov     _WDTCN,#0xDE
0006            578   ;        ADC.c:26: WDTCN = 0xAD; //Second key
0006 7597AD     579            mov     _WDTCN,#0xAD
0009            580   ;        ADC.c:28: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     581            mov     _VDM0CN,#0x80
000C            582   ;        ADC.c:29: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     583            mov     _RSTSRC,#0x06
000F            584   ;        ADC.c:36: SFRPAGE = 0x10;
000F 75A710     585            mov     _SFRPAGE,#0x10
0012            586   ;        ADC.c:37: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     587            mov     _PFE0CN,#0x20
0015            588   ;        ADC.c:38: SFRPAGE = 0x00;
0015 75A700     589            mov     _SFRPAGE,#0x00
0018            590   ;        ADC.c:59: CLKSEL = 0x00;
0018 75A900     591            mov     _CLKSEL,#0x00
001B            592   ;        ADC.c:60: CLKSEL = 0x00;
001B 75A900     593            mov     _CLKSEL,#0x00
001E            594   ;        ADC.c:61: while ((CLKSEL & 0x80) == 0);
001E            595   L002001?:
001E E5A9       596            mov     a,_CLKSEL
0020 30E7B8     597            jnb     acc.7,L002001?
0023            598   ;        ADC.c:62: CLKSEL = 0x03;
0023 75A903     599            mov     _CLKSEL,#0x03
0026            600   ;        ADC.c:63: CLKSEL = 0x03;
0026 75A903     601            mov     _CLKSEL,#0x03
0029            602   ;        ADC.c:64: while ((CLKSEL & 0x80) == 0);
0029            603   L002004?:
0029 E5A9       604            mov     a,_CLKSEL
002B 30E738     605            jnb     acc.7,L002004?
002E            606   ;        ADC.c:69: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     607            orl     _P0MDOUT,#0x11
0031            608   ;        ADC.c:70: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     609            orl     _P2MDOUT,#0x01
0034            610   ;        ADC.c:71: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     611            mov     _XBR0,#0x01
0037            612   ;        ADC.c:72: XBR1     = 0X00;
0037 75E200     613            mov     _XBR1,#0x00
003A            614   ;        ADC.c:73: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     615            mov     _XBR2,#0x41
003D            616   ;        ADC.c:79: SCON0 = 0x10;
003D 759810     617            mov     _SCON0,#0x10
0040            618   ;        ADC.c:80: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     619            mov     _TH1,#0xE6
0043            620   ;        ADC.c:81: TL1 = TH1;      // Init Timer1
0043 858D8B     621            mov     _TL1,_TH1
0046            622   ;        ADC.c:82: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     623            anl     _TMOD,#0x0F
0049            624   ;        ADC.c:83: TMOD |=  0x20;                       
0049 438920     625            orl     _TMOD,#0x20
004C            626   ;        ADC.c:84: TR1 = 1; // START Timer1
004C D28E       627            setb    _TR1
004E            628   ;        ADC.c:85: TI = 1;  // Indicate TX0 ready
004E D299       629            setb    _TI
0050            630   ;        ADC.c:87: return 0;
0050 758200     631            mov     dpl,#0x00
0053 22         632            ret
0054            633   ;------------------------------------------------------------
0054            634   ;Allocation info for local variables in function 'InitADC'
0054            635   ;------------------------------------------------------------
0054            636   ;------------------------------------------------------------
0054            637   ;        ADC.c:90: void InitADC (void)
0054            638   ;        -----------------------------------------
0054            639   ;         function InitADC
0054            640   ;        -----------------------------------------
0054            641   _InitADC:
0054            642   ;        ADC.c:92: SFRPAGE = 0x00;
0054 75A700     643            mov     _SFRPAGE,#0x00
0057            644   ;        ADC.c:93: ADEN=0; // Disable ADC
0057 C2EF       645            clr     _ADEN
0059            646   ;        ADC.c:98: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     647            mov     _ADC0CN1,#0x80
005C            648   ;        ADC.c:102: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     649            mov     _ADC0CF0,#0x20
005F            650   ;        ADC.c:106: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     651            mov     _ADC0CF1,#0x1E
0062            652   ;        ADC.c:115: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     653            mov     _ADC0CN0,#0x00
0065            654   ;        ADC.c:120: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     655            mov     _ADC0CF2,#0x3F
0068            656   ;        ADC.c:124: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     657            mov     _ADC0CN2,#0x00
006B            658   ;        ADC.c:126: ADEN=1; // Enable ADC
006B D2EF       659            setb    _ADEN
006D 22         660            ret
006E            661   ;------------------------------------------------------------
006E            662   ;Allocation info for local variables in function 'Timer3us'
006E            663   ;------------------------------------------------------------
006E            664   ;us                        Allocated to registers r2 
006E            665   ;i                         Allocated to registers r3 
006E            666   ;------------------------------------------------------------
006E            667   ;        ADC.c:130: void Timer3us(unsigned char us)
006E            668   ;        -----------------------------------------
006E            669   ;         function Timer3us
006E            670   ;        -----------------------------------------
006E            671   _Timer3us:
006E AA82       672            mov     r2,dpl
0070            673   ;        ADC.c:135: CKCON0|=0b_0100_0000;
0070 438E40     674            orl     _CKCON0,#0x40
0073            675   ;        ADC.c:137: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0073 7592B8     676            mov     _TMR3RL,#0xB8
0076 7593FF     677            mov     (_TMR3RL >> 8),#0xFF
0079            678   ;        ADC.c:138: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0079 859294     679            mov     _TMR3,_TMR3RL
007C 859395     680            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007F            681   ;        ADC.c:140: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007F 759104     682            mov     _TMR3CN0,#0x04
0082            683   ;        ADC.c:141: for (i = 0; i < us; i++)       // Count <us> overflows
0082 7B00       684            mov     r3,#0x00
0084            685   L004004?:
0084 C3         686            clr     c
0085 EB         687            mov     a,r3
0086 9A         688            subb    a,r2
0087 5000       689            jnc     L004007?
0089            690   ;        ADC.c:143: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0089            691   L004001?:
0089 E591       692            mov     a,_TMR3CN0
008B 30E738     693            jnb     acc.7,L004001?
008E            694   ;        ADC.c:144: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008E 53917F     695            anl     _TMR3CN0,#0x7F
0091            696   ;        ADC.c:141: for (i = 0; i < us; i++)       // Count <us> overflows
0091 0B         697            inc     r3
0092 8000       698            sjmp    L004004?
0094            699   L004007?:
0094            700   ;        ADC.c:146: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0094 759100     701            mov     _TMR3CN0,#0x00
0097 22         702            ret
0098            703   ;------------------------------------------------------------
0098            704   ;Allocation info for local variables in function 'waitms'
0098            705   ;------------------------------------------------------------
0098            706   ;ms                        Allocated to registers r2 r3 
0098            707   ;j                         Allocated to registers r4 r5 
0098            708   ;k                         Allocated to registers r6 
0098            709   ;------------------------------------------------------------
0098            710   ;        ADC.c:149: void waitms (unsigned int ms)
0098            711   ;        -----------------------------------------
0098            712   ;         function waitms
0098            713   ;        -----------------------------------------
0098            714   _waitms:
0098 AA82       715            mov     r2,dpl
009A AB83       716            mov     r3,dph
009C            717   ;        ADC.c:153: for(j=0; j<ms; j++)
009C 7C00       718            mov     r4,#0x00
009E 7D00       719            mov     r5,#0x00
00A0            720   L005005?:
00A0 C3         721            clr     c
00A1 EC         722            mov     a,r4
00A2 9A         723            subb    a,r2
00A3 ED         724            mov     a,r5
00A4 9B         725            subb    a,r3
00A5 5000       726            jnc     L005009?
00A7            727   ;        ADC.c:154: for (k=0; k<4; k++) Timer3us(250);
00A7 7E00       728            mov     r6,#0x00
00A9            729   L005001?:
00A9 BE0478     730            cjne    r6,#0x04,L005018?
00AC            731   L005018?:
00AC 5000       732            jnc     L005007?
00AE 7582FA     733            mov     dpl,#0xFA
00B1 C002       734            push    ar2
00B3 C003       735            push    ar3
00B5 C004       736            push    ar4
00B7 C005       737            push    ar5
00B9 C006       738            push    ar6
00BB 120000     739            lcall   _Timer3us
00BE D006       740            pop     ar6
00C0 D005       741            pop     ar5
00C2 D004       742            pop     ar4
00C4 D003       743            pop     ar3
00C6 D002       744            pop     ar2
00C8 0E         745            inc     r6
00C9 8000       746            sjmp    L005001?
00CB            747   L005007?:
00CB            748   ;        ADC.c:153: for(j=0; j<ms; j++)
00CB 0C         749            inc     r4
00CC BC00B8     750            cjne    r4,#0x00,L005005?
00CF 0D         751            inc     r5
00D0 8000       752            sjmp    L005005?
00D2            753   L005009?:
00D2 22         754            ret
00D3            755   ;------------------------------------------------------------
00D3            756   ;Allocation info for local variables in function 'InitPinADC'
00D3            757   ;------------------------------------------------------------
00D3            758   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
00D3            759   ;portno                    Allocated to registers r2 
00D3            760   ;mask                      Allocated to registers r3 
00D3            761   ;------------------------------------------------------------
00D3            762   ;        ADC.c:159: void InitPinADC (unsigned char portno, unsigned char pin_num)
00D3            763   ;        -----------------------------------------
00D3            764   ;         function InitPinADC
00D3            765   ;        -----------------------------------------
00D3            766   _InitPinADC:
00D3 AA82       767            mov     r2,dpl
00D5            768   ;        ADC.c:163: mask=1<<pin_num;
00D5 85C0F0     769            mov     b,_InitPinADC_PARM_2
00D8 05F0       770            inc     b
00DA 7401       771            mov     a,#0x01
00DC 8000       772            sjmp    L006013?
00DE            773   L006011?:
00DE 25E0       774            add     a,acc
00E0            775   L006013?:
00E0 D5F078     776            djnz    b,L006011?
00E3 FB         777            mov     r3,a
00E4            778   ;        ADC.c:165: SFRPAGE = 0x20;
00E4 75A720     779            mov     _SFRPAGE,#0x20
00E7            780   ;        ADC.c:166: switch (portno)
00E7 BA00B8     781            cjne    r2,#0x00,L006014?
00EA 8000       782            sjmp    L006001?
00EC            783   L006014?:
00EC BA0138     784            cjne    r2,#0x01,L006015?
00EF 8000       785            sjmp    L006002?
00F1            786   L006015?:
00F1            787   ;        ADC.c:168: case 0:
00F1 BA02B8     788            cjne    r2,#0x02,L006005?
00F4 8000       789            sjmp    L006003?
00F6            790   L006001?:
00F6            791   ;        ADC.c:169: P0MDIN &= (~mask); // Set pin as analog input
00F6 EB         792            mov     a,r3
00F7 F4         793            cpl     a
00F8 FA         794            mov     r2,a
00F9 52F1       795            anl     _P0MDIN,a
00FB            796   ;        ADC.c:170: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00FB EB         797            mov     a,r3
00FC 42D4       798            orl     _P0SKIP,a
00FE            799   ;        ADC.c:171: break;
00FE            800   ;        ADC.c:172: case 1:
00FE 8000       801            sjmp    L006005?
0100            802   L006002?:
0100            803   ;        ADC.c:173: P1MDIN &= (~mask); // Set pin as analog input
0100 EB         804            mov     a,r3
0101 F4         805            cpl     a
0102 FA         806            mov     r2,a
0103 52F2       807            anl     _P1MDIN,a
0105            808   ;        ADC.c:174: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0105 EB         809            mov     a,r3
0106 42D5       810            orl     _P1SKIP,a
0108            811   ;        ADC.c:175: break;
0108            812   ;        ADC.c:176: case 2:
0108 8000       813            sjmp    L006005?
010A            814   L006003?:
010A            815   ;        ADC.c:177: P2MDIN &= (~mask); // Set pin as analog input
010A EB         816            mov     a,r3
010B F4         817            cpl     a
010C FA         818            mov     r2,a
010D 52F3       819            anl     _P2MDIN,a
010F            820   ;        ADC.c:178: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010F EB         821            mov     a,r3
0110 42CC       822            orl     _P2SKIP,a
0112            823   ;        ADC.c:182: }
0112            824   L006005?:
0112            825   ;        ADC.c:183: SFRPAGE = 0x00;
0112 75A700     826            mov     _SFRPAGE,#0x00
0115 22         827            ret
0116            828   ;------------------------------------------------------------
0116            829   ;Allocation info for local variables in function 'ADC_at_Pin'
0116            830   ;------------------------------------------------------------
0116            831   ;pin                       Allocated to registers 
0116            832   ;------------------------------------------------------------
0116            833   ;        ADC.c:186: unsigned int ADC_at_Pin(unsigned char pin)
0116            834   ;        -----------------------------------------
0116            835   ;         function ADC_at_Pin
0116            836   ;        -----------------------------------------
0116            837   _ADC_at_Pin:
0116 8582BB     838            mov     _ADC0MX,dpl
0119            839   ;        ADC.c:189: ADINT = 0;
0119 C2ED       840            clr     _ADINT
011B            841   ;        ADC.c:190: ADBUSY = 1;     // Convert voltage at the pin
011B D2EC       842            setb    _ADBUSY
011D            843   ;        ADC.c:191: while (!ADINT); // Wait for conversion to complete
011D            844   L007001?:
011D 30ED38     845            jnb     _ADINT,L007001?
0120            846   ;        ADC.c:192: return (ADC0);
0120 85BD82     847            mov     dpl,_ADC0
0123 85BE83     848            mov     dph,(_ADC0 >> 8)
0126 22         849            ret
0127            850   ;------------------------------------------------------------
0127            851   ;Allocation info for local variables in function 'Volts_at_Pin'
0127            852   ;------------------------------------------------------------
0127            853   ;pin                       Allocated to registers r2 
0127            854   ;------------------------------------------------------------
0127            855   ;        ADC.c:195: float Volts_at_Pin(unsigned char pin)
0127            856   ;        -----------------------------------------
0127            857   ;         function Volts_at_Pin
0127            858   ;        -----------------------------------------
0127            859   _Volts_at_Pin:
0127            860   ;        ADC.c:197: return ((ADC_at_Pin(pin)*VDD)/16383.0);
0127 120000     861            lcall   _ADC_at_Pin
012A 120000     862            lcall   ___uint2fs
012D AA82       863            mov     r2,dpl
012F AB83       864            mov     r3,dph
0131 ACF0       865            mov     r4,b
0133 FD         866            mov     r5,a
0134 C002       867            push    ar2
0136 C003       868            push    ar3
0138 C004       869            push    ar4
013A C005       870            push    ar5
013C 906C8B     871            mov     dptr,#0x6C8B
013F 75F053     872            mov     b,#0x53
0142 7440       873            mov     a,#0x40
0144 120000     874            lcall   ___fsmul
0147 AA82       875            mov     r2,dpl
0149 AB83       876            mov     r3,dph
014B ACF0       877            mov     r4,b
014D FD         878            mov     r5,a
014E E581       879            mov     a,sp
0150 24FC       880            add     a,#0xfc
0152 F581       881            mov     sp,a
0154 E4         882            clr     a
0155 C0E0       883            push    acc
0157 74FC       884            mov     a,#0xFC
0159 C0E0       885            push    acc
015B 747F       886            mov     a,#0x7F
015D C0E0       887            push    acc
015F 7446       888            mov     a,#0x46
0161 C0E0       889            push    acc
0163 8A82       890            mov     dpl,r2
0165 8B83       891            mov     dph,r3
0167 8CF0       892            mov     b,r4
0169 ED         893            mov     a,r5
016A 120000     894            lcall   ___fsdiv
016D AA82       895            mov     r2,dpl
016F AB83       896            mov     r3,dph
0171 ACF0       897            mov     r4,b
0173 FD         898            mov     r5,a
0174 E581       899            mov     a,sp
0176 24FC       900            add     a,#0xfc
0178 F581       901            mov     sp,a
017A 8A82       902            mov     dpl,r2
017C 8B83       903            mov     dph,r3
017E 8CF0       904            mov     b,r4
0180 ED         905            mov     a,r5
0181 22         906            ret
0182            907   ;------------------------------------------------------------
0182            908   ;Allocation info for local variables in function 'UART1_Init'
0182            909   ;------------------------------------------------------------
0182            910   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0182            911   ;------------------------------------------------------------
0182            912   ;        ADC.c:201: void UART1_Init (unsigned long baudrate)
0182            913   ;        -----------------------------------------
0182            914   ;         function UART1_Init
0182            915   ;        -----------------------------------------
0182            916   _UART1_Init:
0182 AA82       917            mov     r2,dpl
0184 AB83       918            mov     r3,dph
0186 ACF0       919            mov     r4,b
0188 FD         920            mov     r5,a
0189            921   ;        ADC.c:203: SFRPAGE = 0x20;
0189 75A720     922            mov     _SFRPAGE,#0x20
018C            923   ;        ADC.c:204: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
018C 75930C     924            mov     _SMOD1,#0x0C
018F            925   ;        ADC.c:205: SCON1 = 0x10;
018F 75C810     926            mov     _SCON1,#0x10
0192            927   ;        ADC.c:206: SBCON1 =0x00;   // disable baud rate generator
0192 759400     928            mov     _SBCON1,#0x00
0195            929   ;        ADC.c:207: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
0195 8A00       930            mov     __divulong_PARM_2,r2
0197 8B01       931            mov     (__divulong_PARM_2 + 1),r3
0199 8C02       932            mov     (__divulong_PARM_2 + 2),r4
019B 8D03       933            mov     (__divulong_PARM_2 + 3),r5
019D 90A200     934            mov     dptr,#0xA200
01A0 75F04A     935            mov     b,#0x4A
01A3 7404       936            mov     a,#0x04
01A5 120000     937            lcall   __divulong
01A8 AA82       938            mov     r2,dpl
01AA AB83       939            mov     r3,dph
01AC ACF0       940            mov     r4,b
01AE FD         941            mov     r5,a
01AF 750018     942            mov     __divulong_PARM_2,#0x18
01B2 E4         943            clr     a
01B3 F501       944            mov     (__divulong_PARM_2 + 1),a
01B5 F502       945            mov     (__divulong_PARM_2 + 2),a
01B7 F503       946            mov     (__divulong_PARM_2 + 3),a
01B9 8A82       947            mov     dpl,r2
01BB 8B83       948            mov     dph,r3
01BD 8CF0       949            mov     b,r4
01BF ED         950            mov     a,r5
01C0 120000     951            lcall   __divulong
01C3 AA82       952            mov     r2,dpl
01C5 AB83       953            mov     r3,dph
01C7 ACF0       954            mov     r4,b
01C9 FD         955            mov     r5,a
01CA E4         956            clr     a
01CB C3         957            clr     c
01CC 9A         958            subb    a,r2
01CD FA         959            mov     r2,a
01CE E4         960            clr     a
01CF 9B         961            subb    a,r3
01D0 FB         962            mov     r3,a
01D1 7401       963            mov     a,#0x01
01D3 9C         964            subb    a,r4
01D4 E4         965            clr     a
01D5 9D         966            subb    a,r5
01D6 8A95       967            mov     _SBRL1,r2
01D8 8B96       968            mov     (_SBRL1 >> 8),r3
01DA            969   ;        ADC.c:208: TI1 = 1; // indicate ready for TX
01DA D2C9       970            setb    _TI1
01DC            971   ;        ADC.c:209: SBCON1 |= 0x40;   // enable baud rate generator
01DC 439440     972            orl     _SBCON1,#0x40
01DF            973   ;        ADC.c:210: SFRPAGE = 0x00;
01DF 75A700     974            mov     _SFRPAGE,#0x00
01E2 22         975            ret
01E3            976   ;------------------------------------------------------------
01E3            977   ;Allocation info for local variables in function 'putchar1'
01E3            978   ;------------------------------------------------------------
01E3            979   ;c                         Allocated to registers r2 
01E3            980   ;------------------------------------------------------------
01E3            981   ;        ADC.c:213: void putchar1 (char c) 
01E3            982   ;        -----------------------------------------
01E3            983   ;         function putchar1
01E3            984   ;        -----------------------------------------
01E3            985   _putchar1:
01E3 AA82       986            mov     r2,dpl
01E5            987   ;        ADC.c:215: SFRPAGE = 0x20;
01E5 75A720     988            mov     _SFRPAGE,#0x20
01E8            989   ;        ADC.c:216: while (!TI1);
01E8            990   L010001?:
01E8            991   ;        ADC.c:217: TI1=0;
01E8 10C948     992            jbc     _TI1,L010008?
01EB 8000       993            sjmp    L010001?
01ED            994   L010008?:
01ED            995   ;        ADC.c:218: SBUF1 = c;
01ED 8A92       996            mov     _SBUF1,r2
01EF            997   ;        ADC.c:219: SFRPAGE = 0x00;
01EF 75A700     998            mov     _SFRPAGE,#0x00
01F2 22         999            ret
01F3           1000   ;------------------------------------------------------------
01F3           1001   ;Allocation info for local variables in function 'sendstr1'
01F3           1002   ;------------------------------------------------------------
01F3           1003   ;s                         Allocated to registers r2 r3 r4 
01F3           1004   ;------------------------------------------------------------
01F3           1005   ;        ADC.c:222: void sendstr1 (char * s)
01F3           1006   ;        -----------------------------------------
01F3           1007   ;         function sendstr1
01F3           1008   ;        -----------------------------------------
01F3           1009   _sendstr1:
01F3 AA82      1010            mov     r2,dpl
01F5 AB83      1011            mov     r3,dph
01F7 ACF0      1012            mov     r4,b
01F9           1013   ;        ADC.c:224: while(*s)
01F9           1014   L011001?:
01F9 8A82      1015            mov     dpl,r2
01FB 8B83      1016            mov     dph,r3
01FD 8CF0      1017            mov     b,r4
01FF 120000    1018            lcall   __gptrget
0202 FD        1019            mov     r5,a
0203 6000      1020            jz      L011004?
0205           1021   ;        ADC.c:226: putchar1(*s);
0205 8D82      1022            mov     dpl,r5
0207 C002      1023            push    ar2
0209 C003      1024            push    ar3
020B C004      1025            push    ar4
020D 120000    1026            lcall   _putchar1
0210 D004      1027            pop     ar4
0212 D003      1028            pop     ar3
0214 D002      1029            pop     ar2
0216           1030   ;        ADC.c:227: s++;         
0216 0A        1031            inc     r2
0217 BA0088    1032            cjne    r2,#0x00,L011001?
021A 0B        1033            inc     r3
021B 8000      1034            sjmp    L011001?
021D           1035   L011004?:
021D 22        1036            ret
021E           1037   ;------------------------------------------------------------
021E           1038   ;Allocation info for local variables in function 'getchar1'
021E           1039   ;------------------------------------------------------------
021E           1040   ;c                         Allocated to registers 
021E           1041   ;------------------------------------------------------------
021E           1042   ;        ADC.c:231: char getchar1 (void)
021E           1043   ;        -----------------------------------------
021E           1044   ;         function getchar1
021E           1045   ;        -----------------------------------------
021E           1046   _getchar1:
021E           1047   ;        ADC.c:234: SFRPAGE = 0x20;
021E 75A720    1048            mov     _SFRPAGE,#0x20
0221           1049   ;        ADC.c:235: while (!RI1);
0221           1050   L012001?:
0221           1051   ;        ADC.c:236: RI1=0;
0221 10C888    1052            jbc     _RI1,L012008?
0224 8000      1053            sjmp    L012001?
0226           1054   L012008?:
0226           1055   ;        ADC.c:238: SCON1&=0b_0011_1111;
0226 53C83F    1056            anl     _SCON1,#0x3F
0229           1057   ;        ADC.c:239: c = SBUF1;
0229 859282    1058            mov     dpl,_SBUF1
022C           1059   ;        ADC.c:240: SFRPAGE = 0x00;
022C 75A700    1060            mov     _SFRPAGE,#0x00
022F           1061   ;        ADC.c:241: return (c);
022F 22        1062            ret
0230           1063   ;------------------------------------------------------------
0230           1064   ;Allocation info for local variables in function 'getchar1_with_timeout'
0230           1065   ;------------------------------------------------------------
0230           1066   ;c                         Allocated to registers 
0230           1067   ;timeout                   Allocated to registers r2 r3 
0230           1068   ;------------------------------------------------------------
0230           1069   ;        ADC.c:244: char getchar1_with_timeout (void)
0230           1070   ;        -----------------------------------------
0230           1071   ;         function getchar1_with_timeout
0230           1072   ;        -----------------------------------------
0230           1073   _getchar1_with_timeout:
0230           1074   ;        ADC.c:248: SFRPAGE = 0x20;
0230 75A720    1075            mov     _SFRPAGE,#0x20
0233           1076   ;        ADC.c:250: while (!RI1)
0233 7A00      1077            mov     r2,#0x00
0235 7B00      1078            mov     r3,#0x00
0237           1079   L013003?:
0237 20C808    1080            jb      _RI1,L013005?
023A           1081   ;        ADC.c:252: SFRPAGE = 0x00;
023A 75A700    1082            mov     _SFRPAGE,#0x00
023D           1083   ;        ADC.c:253: Timer3us(20);
023D 758214    1084            mov     dpl,#0x14
0240 C002      1085            push    ar2
0242 C003      1086            push    ar3
0244 120000    1087            lcall   _Timer3us
0247 D003      1088            pop     ar3
0249 D002      1089            pop     ar2
024B           1090   ;        ADC.c:254: SFRPAGE = 0x20;
024B 75A720    1091            mov     _SFRPAGE,#0x20
024E           1092   ;        ADC.c:255: timeout++;
024E 0A        1093            inc     r2
024F BA0048    1094            cjne    r2,#0x00,L013012?
0252 0B        1095            inc     r3
0253           1096   L013012?:
0253           1097   ;        ADC.c:256: if(timeout==25000)
0253 BAA8C8    1098            cjne    r2,#0xA8,L013003?
0256 BB61C8    1099            cjne    r3,#0x61,L013003?
0259           1100   ;        ADC.c:258: SFRPAGE = 0x00;
0259 75A700    1101            mov     _SFRPAGE,#0x00
025C           1102   ;        ADC.c:259: return ('\n'); // Timeout after half second
025C 75820A    1103            mov     dpl,#0x0A
025F 22        1104            ret
0260           1105   L013005?:
0260           1106   ;        ADC.c:262: RI1=0;
0260 C2C8      1107            clr     _RI1
0262           1108   ;        ADC.c:264: SCON1&=0b_0011_1111;
0262 53C83F    1109            anl     _SCON1,#0x3F
0265           1110   ;        ADC.c:265: c = SBUF1;
0265 859282    1111            mov     dpl,_SBUF1
0268           1112   ;        ADC.c:266: SFRPAGE = 0x00;
0268 75A700    1113            mov     _SFRPAGE,#0x00
026B           1114   ;        ADC.c:267: return (c);
026B 22        1115            ret
026C           1116   ;------------------------------------------------------------
026C           1117   ;Allocation info for local variables in function 'getstr1'
026C           1118   ;------------------------------------------------------------
026C           1119   ;s                         Allocated to registers r2 r3 r4 
026C           1120   ;c                         Allocated to registers r5 
026C           1121   ;------------------------------------------------------------
026C           1122   ;        ADC.c:270: void getstr1 (char * s)
026C           1123   ;        -----------------------------------------
026C           1124   ;         function getstr1
026C           1125   ;        -----------------------------------------
026C           1126   _getstr1:
026C AA82      1127            mov     r2,dpl
026E AB83      1128            mov     r3,dph
0270 ACF0      1129            mov     r4,b
0272           1130   ;        ADC.c:274: while(1)
0272           1131   L014004?:
0272           1132   ;        ADC.c:276: c=getchar1_with_timeout();
0272 C002      1133            push    ar2
0274 C003      1134            push    ar3
0276 C004      1135            push    ar4
0278 120000    1136            lcall   _getchar1_with_timeout
027B AD82      1137            mov     r5,dpl
027D D004      1138            pop     ar4
027F D003      1139            pop     ar3
0281 D002      1140            pop     ar2
0283           1141   ;        ADC.c:277: if(c=='\n')
0283 BD0AC8    1142            cjne    r5,#0x0A,L014002?
0286           1143   ;        ADC.c:279: *s=0;
0286 8A82      1144            mov     dpl,r2
0288 8B83      1145            mov     dph,r3
028A 8CF0      1146            mov     b,r4
028C E4        1147            clr     a
028D           1148   ;        ADC.c:280: return;
028D 020000    1149            ljmp    __gptrput
0290           1150   L014002?:
0290           1151   ;        ADC.c:282: *s=c;
0290 8A82      1152            mov     dpl,r2
0292 8B83      1153            mov     dph,r3
0294 8CF0      1154            mov     b,r4
0296 ED        1155            mov     a,r5
0297 120000    1156            lcall   __gptrput
029A A3        1157            inc     dptr
029B AA82      1158            mov     r2,dpl
029D AB83      1159            mov     r3,dph
029F           1160   ;        ADC.c:283: s++;
029F 8000      1161            sjmp    L014004?
02A1           1162   ;------------------------------------------------------------
02A1           1163   ;Allocation info for local variables in function 'RXU1'
02A1           1164   ;------------------------------------------------------------
02A1           1165   ;------------------------------------------------------------
02A1           1166   ;        ADC.c:288: bit RXU1 (void)
02A1           1167   ;        -----------------------------------------
02A1           1168   ;         function RXU1
02A1           1169   ;        -----------------------------------------
02A1           1170   _RXU1:
02A1           1171   ;        ADC.c:291: SFRPAGE = 0x20;
02A1 75A720    1172            mov     _SFRPAGE,#0x20
02A4           1173   ;        ADC.c:292: mybit=RI1;
02A4 A2C8      1174            mov     c,_RI1
02A6           1175   ;        ADC.c:293: SFRPAGE = 0x00;
02A6 75A700    1176            mov     _SFRPAGE,#0x00
02A9           1177   ;        ADC.c:294: return mybit;
02A9 22        1178            ret
02AA           1179   ;------------------------------------------------------------
02AA           1180   ;Allocation info for local variables in function 'waitms_or_RI1'
02AA           1181   ;------------------------------------------------------------
02AA           1182   ;ms                        Allocated to registers r2 r3 
02AA           1183   ;j                         Allocated to registers r4 r5 
02AA           1184   ;k                         Allocated to registers r6 
02AA           1185   ;------------------------------------------------------------
02AA           1186   ;        ADC.c:297: void waitms_or_RI1 (unsigned int ms)
02AA           1187   ;        -----------------------------------------
02AA           1188   ;         function waitms_or_RI1
02AA           1189   ;        -----------------------------------------
02AA           1190   _waitms_or_RI1:
02AA AA82      1191            mov     r2,dpl
02AC AB83      1192            mov     r3,dph
02AE           1193   ;        ADC.c:301: for(j=0; j<ms; j++)
02AE 7C00      1194            mov     r4,#0x00
02B0 7D00      1195            mov     r5,#0x00
02B2           1196   L016007?:
02B2 C3        1197            clr     c
02B3 EC        1198            mov     a,r4
02B4 9A        1199            subb    a,r2
02B5 ED        1200            mov     a,r5
02B6 9B        1201            subb    a,r3
02B7 5000      1202            jnc     L016011?
02B9           1203   ;        ADC.c:303: for (k=0; k<4; k++)
02B9 7E00      1204            mov     r6,#0x00
02BB           1205   L016003?:
02BB BE0408    1206            cjne    r6,#0x04,L016019?
02BE           1207   L016019?:
02BE 5000      1208            jnc     L016009?
02C0           1209   ;        ADC.c:305: if(RXU1()) return;
02C0 C002      1210            push    ar2
02C2 C003      1211            push    ar3
02C4 C004      1212            push    ar4
02C6 C005      1213            push    ar5
02C8 C006      1214            push    ar6
02CA 120000    1215            lcall   _RXU1
02CD E4        1216            clr     a
02CE 33        1217            rlc     a
02CF D006      1218            pop     ar6
02D1 D005      1219            pop     ar5
02D3 D004      1220            pop     ar4
02D5 D003      1221            pop     ar3
02D7 D002      1222            pop     ar2
02D9 6000      1223            jz      L016002?
02DB 22        1224            ret
02DC           1225   L016002?:
02DC           1226   ;        ADC.c:306: Timer3us(250);
02DC 7582FA    1227            mov     dpl,#0xFA
02DF C002      1228            push    ar2
02E1 C003      1229            push    ar3
02E3 C004      1230            push    ar4
02E5 C005      1231            push    ar5
02E7 C006      1232            push    ar6
02E9 120000    1233            lcall   _Timer3us
02EC D006      1234            pop     ar6
02EE D005      1235            pop     ar5
02F0 D004      1236            pop     ar4
02F2 D003      1237            pop     ar3
02F4 D002      1238            pop     ar2
02F6           1239   ;        ADC.c:303: for (k=0; k<4; k++)
02F6 0E        1240            inc     r6
02F7 8000      1241            sjmp    L016003?
02F9           1242   L016009?:
02F9           1243   ;        ADC.c:301: for(j=0; j<ms; j++)
02F9 0C        1244            inc     r4
02FA BC0048    1245            cjne    r4,#0x00,L016007?
02FD 0D        1246            inc     r5
02FE 8000      1247            sjmp    L016007?
0300           1248   L016011?:
0300 22        1249            ret
0301           1250   ;------------------------------------------------------------
0301           1251   ;Allocation info for local variables in function 'SendATCommand'
0301           1252   ;------------------------------------------------------------
0301           1253   ;s                         Allocated to registers r2 r3 r4 
0301           1254   ;------------------------------------------------------------
0301           1255   ;        ADC.c:311: void SendATCommand (char * s)
0301           1256   ;        -----------------------------------------
0301           1257   ;         function SendATCommand
0301           1258   ;        -----------------------------------------
0301           1259   _SendATCommand:
0301 AA82      1260            mov     r2,dpl
0303 AB83      1261            mov     r3,dph
0305 ACF0      1262            mov     r4,b
0307           1263   ;        ADC.c:313: printf("Command: %s", s);
0307 C002      1264            push    ar2
0309 C003      1265            push    ar3
030B C004      1266            push    ar4
030D C002      1267            push    ar2
030F C003      1268            push    ar3
0311 C004      1269            push    ar4
0313 74C8      1270            mov     a,#__str_0
0315 C0E0      1271            push    acc
0317 74BF      1272            mov     a,#(__str_0 >> 8)
0319 C0E0      1273            push    acc
031B 7480      1274            mov     a,#0x80
031D C0E0      1275            push    acc
031F 120000    1276            lcall   _printf
0322 E581      1277            mov     a,sp
0324 24FA      1278            add     a,#0xfa
0326 F581      1279            mov     sp,a
0328           1280   ;        ADC.c:314: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0328 C2A0      1281            clr     _P2_0
032A           1282   ;        ADC.c:315: waitms(5);
032A 900005    1283            mov     dptr,#0x0005
032D 120000    1284            lcall   _waitms
0330 D004      1285            pop     ar4
0332 D003      1286            pop     ar3
0334 D002      1287            pop     ar2
0336           1288   ;        ADC.c:316: sendstr1(s);
0336 8A82      1289            mov     dpl,r2
0338 8B83      1290            mov     dph,r3
033A 8CF0      1291            mov     b,r4
033C 120000    1292            lcall   _sendstr1
033F           1293   ;        ADC.c:317: getstr1(buff);
033F 904560    1294            mov     dptr,#_buff
0342 75F040    1295            mov     b,#0x40
0345 120000    1296            lcall   _getstr1
0348           1297   ;        ADC.c:318: waitms(10);
0348 90000A    1298            mov     dptr,#0x000A
034B 120000    1299            lcall   _waitms
034E           1300   ;        ADC.c:319: P2_0=1; // 'set' pin to 1 is normal operation mode.
034E D2A0      1301            setb    _P2_0
0350           1302   ;        ADC.c:320: printf("Response: %s\r\n", buff);
0350 7460      1303            mov     a,#_buff
0352 C0E0      1304            push    acc
0354 7445      1305            mov     a,#(_buff >> 8)
0356 C0E0      1306            push    acc
0358 7440      1307            mov     a,#0x40
035A C0E0      1308            push    acc
035C 7448      1309            mov     a,#__str_1
035E C0E0      1310            push    acc
0360 74C0      1311            mov     a,#(__str_1 >> 8)
0362 C0E0      1312            push    acc
0364 7480      1313            mov     a,#0x80
0366 C0E0      1314            push    acc
0368 120000    1315            lcall   _printf
036B E581      1316            mov     a,sp
036D 24FA      1317            add     a,#0xfa
036F F581      1318            mov     sp,a
0371 22        1319            ret
0372           1320   ;------------------------------------------------------------
0372           1321   ;Allocation info for local variables in function 'main'
0372           1322   ;------------------------------------------------------------
0372           1323   ;cnt                       Allocated to registers 
0372           1324   ;vXYScalingFactor          Allocated to registers 
0372           1325   ;v                         Allocated with name '_main_v_1_125'
0372           1326   ;vRef                      Allocated with name '_main_vRef_1_125'
0372           1327   ;vMax                      Allocated to registers 
0372           1328   ;Q1                        Allocated to registers 
0372           1329   ;Q2                        Allocated to registers 
0372           1330   ;Q3                        Allocated to registers 
0372           1331   ;Q4                        Allocated to registers 
0372           1332   ;Quadrant                  Allocated to registers 
0372           1333   ;pwm_left_motor            Allocated to registers 
0372           1334   ;pwm_right_motor           Allocated to registers 
0372           1335   ;right_motor_dir           Allocated to registers 
0372           1336   ;left_motor_dir            Allocated to registers 
0372           1337   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0372           1338   ;------------------------------------------------------------
0372           1339   ;        ADC.c:323: void main (void)
0372           1340   ;        -----------------------------------------
0372           1341   ;         function main
0372           1342   ;        -----------------------------------------
0372           1343   _main:
0372           1344   ;        ADC.c:335: waitms(500); // Give PuTTy a chance to start before sending
0372 9001F4    1345            mov     dptr,#0x01F4
0375 120000    1346            lcall   _waitms
0378           1347   ;        ADC.c:336: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0378 7488      1348            mov     a,#__str_2
037A C0E0      1349            push    acc
037C 74C0      1350            mov     a,#(__str_2 >> 8)
037E C0E0      1351            push    acc
0380 7480      1352            mov     a,#0x80
0382 C0E0      1353            push    acc
0384 120000    1354            lcall   _printf
0387 1581      1355            dec     sp
0389 1581      1356            dec     sp
038B 1581      1357            dec     sp
038D           1358   ;        ADC.c:341: __FILE__, __DATE__, __TIME__);
038D           1359   ;        ADC.c:340: "Compiled: %s, %s\n\n",
038D 74C8      1360            mov     a,#__str_6
038F C0E0      1361            push    acc
0391 74C0      1362            mov     a,#(__str_6 >> 8)
0393 C0E0      1363            push    acc
0395 7480      1364            mov     a,#0x80
0397 C0E0      1365            push    acc
0399 7408      1366            mov     a,#__str_5
039B C0E0      1367            push    acc
039D 74C1      1368            mov     a,#(__str_5 >> 8)
039F C0E0      1369            push    acc
03A1 7480      1370            mov     a,#0x80
03A3 C0E0      1371            push    acc
03A5 7448      1372            mov     a,#__str_4
03A7 C0E0      1373            push    acc
03A9 74C1      1374            mov     a,#(__str_4 >> 8)
03AB C0E0      1375            push    acc
03AD 7480      1376            mov     a,#0x80
03AF C0E0      1377            push    acc
03B1 7488      1378            mov     a,#__str_3
03B3 C0E0      1379            push    acc
03B5 74C1      1380            mov     a,#(__str_3 >> 8)
03B7 C0E0      1381            push    acc
03B9 7480      1382            mov     a,#0x80
03BB C0E0      1383            push    acc
03BD 120000    1384            lcall   _printf
03C0 E581      1385            mov     a,sp
03C2 24F4      1386            add     a,#0xf4
03C4 F581      1387            mov     sp,a
03C6           1388   ;        ADC.c:343: InitPinADC(0, 7); // Configure P0.7 as analog input
03C6 75C007    1389            mov     _InitPinADC_PARM_2,#0x07
03C9 758200    1390            mov     dpl,#0x00
03CC 120000    1391            lcall   _InitPinADC
03CF           1392   ;        ADC.c:344: InitPinADC(0, 6); // Configure P0.6 as analog input
03CF 75C006    1393            mov     _InitPinADC_PARM_2,#0x06
03D2 758200    1394            mov     dpl,#0x00
03D5 120000    1395            lcall   _InitPinADC
03D8           1396   ;        ADC.c:345: InitADC();
03D8 120000    1397            lcall   _InitADC
03DB           1398   ;        ADC.c:347: vRef = Volts_at_Pin(QFP32_MUX_P0_6);
03DB 758204    1399            mov     dpl,#0x04
03DE 120000    1400            lcall   _Volts_at_Pin
03E1 8582F8    1401            mov     _main_vRef_1_125,dpl
03E4 8583F9    1402            mov     (_main_vRef_1_125 + 1),dph
03E7 85F0FA    1403            mov     (_main_vRef_1_125 + 2),b
03EA F5FB      1404            mov     (_main_vRef_1_125 + 3),a
03EC           1405   ;        ADC.c:349: Q1 = (vMax-vRef)*sqrtf(2.0);
03EC 900000    1406            mov     dptr,#(0x00&0x00ff)
03EF E4        1407            clr     a
03F0 F5F0      1408            mov     b,a
03F2 7440      1409            mov     a,#0x40
03F4 120000    1410            lcall   _sqrtf
03F7           1411   ;        ADC.c:354: waitms(500);
03F7 9001F4    1412            mov     dptr,#0x01F4
03FA 120000    1413            lcall   _waitms
03FD           1414   ;        ADC.c:355: printf("\r\nJDY-40 test\r\n");
03FD 7408      1415            mov     a,#__str_7
03FF C0E0      1416            push    acc
0401 74C2      1417            mov     a,#(__str_7 >> 8)
0403 C0E0      1418            push    acc
0405 7480      1419            mov     a,#0x80
0407 C0E0      1420            push    acc
0409 120000    1421            lcall   _printf
040C 1581      1422            dec     sp
040E 1581      1423            dec     sp
0410 1581      1424            dec     sp
0412           1425   ;        ADC.c:356: UART1_Init(9600);
0412 902580    1426            mov     dptr,#0x2580
0415 E4        1427            clr     a
0416 F5F0      1428            mov     b,a
0418 120000    1429            lcall   _UART1_Init
041B           1430   ;        ADC.c:372: SendATCommand("AT+DVIDABBA\r\n");  
041B 90C248    1431            mov     dptr,#__str_8
041E 75F080    1432            mov     b,#0x80
0421 120000    1433            lcall   _SendATCommand
0424           1434   ;        ADC.c:375: SendATCommand("AT+VER\r\n");
0424 90C288    1435            mov     dptr,#__str_9
0427 75F080    1436            mov     b,#0x80
042A 120000    1437            lcall   _SendATCommand
042D           1438   ;        ADC.c:376: SendATCommand("AT+BAUD\r\n");
042D 90C2C8    1439            mov     dptr,#__str_10
0430 75F080    1440            mov     b,#0x80
0433 120000    1441            lcall   _SendATCommand
0436           1442   ;        ADC.c:377: SendATCommand("AT+RFID\r\n");
0436 90C308    1443            mov     dptr,#__str_11
0439 75F080    1444            mov     b,#0x80
043C 120000    1445            lcall   _SendATCommand
043F           1446   ;        ADC.c:378: SendATCommand("AT+DVID\r\n");
043F 90C348    1447            mov     dptr,#__str_12
0442 75F080    1448            mov     b,#0x80
0445 120000    1449            lcall   _SendATCommand
0448           1450   ;        ADC.c:379: SendATCommand("AT+RFC\r\n");
0448 90C388    1451            mov     dptr,#__str_13
044B 75F080    1452            mov     b,#0x80
044E 120000    1453            lcall   _SendATCommand
0451           1454   ;        ADC.c:380: SendATCommand("AT+POWE\r\n");
0451 90C3C8    1455            mov     dptr,#__str_14
0454 75F080    1456            mov     b,#0x80
0457 120000    1457            lcall   _SendATCommand
045A           1458   ;        ADC.c:381: SendATCommand("AT+CLSS\r\n");
045A 90C408    1459            mov     dptr,#__str_15
045D 75F080    1460            mov     b,#0x80
0460 120000    1461            lcall   _SendATCommand
0463           1462   ;        ADC.c:383: printf("\r\Press and hold the BOOT button to transmit.\r\n");
0463 7448      1463            mov     a,#__str_16
0465 C0E0      1464            push    acc
0467 74C4      1465            mov     a,#(__str_16 >> 8)
0469 C0E0      1466            push    acc
046B 7480      1467            mov     a,#0x80
046D C0E0      1468            push    acc
046F 120000    1469            lcall   _printf
0472 1581      1470            dec     sp
0474 1581      1471            dec     sp
0476 1581      1472            dec     sp
0478           1473   ;        ADC.c:387: while(1)
0478           1474   L018040?:
0478           1475   ;        ADC.c:390: v[0] = Volts_at_Pin(QFP32_MUX_P0_7); //vRy
0478 758205    1476            mov     dpl,#0x05
047B 120000    1477            lcall   _Volts_at_Pin
047E AE82      1478            mov     r6,dpl
0480 AF83      1479            mov     r7,dph
0482 AAF0      1480            mov     r2,b
0484 FB        1481            mov     r3,a
0485 8EA8      1482            mov     _main_v_1_125,r6
0487 8FA9      1483            mov     (_main_v_1_125 + 1),r7
0489 8AAA      1484            mov     (_main_v_1_125 + 2),r2
048B 8BAB      1485            mov     (_main_v_1_125 + 3),r3
048D           1486   ;        ADC.c:391: v[1] = Volts_at_Pin(QFP32_MUX_P0_6); // vRx
048D 758204    1487            mov     dpl,#0x04
0490 120000    1488            lcall   _Volts_at_Pin
0493 AA82      1489            mov     r2,dpl
0495 AB83      1490            mov     r3,dph
0497 ACF0      1491            mov     r4,b
0499 FD        1492            mov     r5,a
049A 8AAC      1493            mov     (_main_v_1_125 + 0x0004),r2
049C 8BAD      1494            mov     ((_main_v_1_125 + 0x0004) + 1),r3
049E 8CAE      1495            mov     ((_main_v_1_125 + 0x0004) + 2),r4
04A0 8DAF      1496            mov     ((_main_v_1_125 + 0x0004) + 3),r5
04A2           1497   ;        ADC.c:393: if(v[1] - 0.2 > vRef && v[0] - 0.2 > vRef) //Quadrant 1 (Top Right)
04A2 74CD      1498            mov     a,#0xCD
04A4 C0E0      1499            push    acc
04A6 74CC      1500            mov     a,#0xCC
04A8 C0E0      1501            push    acc
04AA 744C      1502            mov     a,#0x4C
04AC C0E0      1503            push    acc
04AE 743E      1504            mov     a,#0x3E
04B0 C0E0      1505            push    acc
04B2 8A82      1506            mov     dpl,r2
04B4 8B83      1507            mov     dph,r3
04B6 8CF0      1508            mov     b,r4
04B8 ED        1509            mov     a,r5
04B9 120000    1510            lcall   ___fssub
04BC AA82      1511            mov     r2,dpl
04BE AB83      1512            mov     r3,dph
04C0 ACF0      1513            mov     r4,b
04C2 FD        1514            mov     r5,a
04C3 E581      1515            mov     a,sp
04C5 24FC      1516            add     a,#0xfc
04C7 F581      1517            mov     sp,a
04C9 C0F8      1518            push    _main_vRef_1_125
04CB C0F9      1519            push    (_main_vRef_1_125 + 1)
04CD C0FA      1520            push    (_main_vRef_1_125 + 2)
04CF C0FB      1521            push    (_main_vRef_1_125 + 3)
04D1 8A82      1522            mov     dpl,r2
04D3 8B83      1523            mov     dph,r3
04D5 8CF0      1524            mov     b,r4
04D7 ED        1525            mov     a,r5
04D8 120000    1526            lcall   ___fsgt
04DB AA82      1527            mov     r2,dpl
04DD E581      1528            mov     a,sp
04DF 24FC      1529            add     a,#0xfc
04E1 F581      1530            mov     sp,a
04E3 EA        1531            mov     a,r2
04E4 7000      1532            jnz     L018064?
04E6 020000    1533            ljmp    L018030?
04E9           1534   L018064?:
04E9 74CD      1535            mov     a,#0xCD
04EB C0E0      1536            push    acc
04ED 74CC      1537            mov     a,#0xCC
04EF C0E0      1538            push    acc
04F1 744C      1539            mov     a,#0x4C
04F3 C0E0      1540            push    acc
04F5 743E      1541            mov     a,#0x3E
04F7 C0E0      1542            push    acc
04F9 85A882    1543            mov     dpl,_main_v_1_125
04FC 85A983    1544            mov     dph,(_main_v_1_125 + 1)
04FF 85AAF0    1545            mov     b,(_main_v_1_125 + 2)
0502 E5AB      1546            mov     a,(_main_v_1_125 + 3)
0504 120000    1547            lcall   ___fssub
0507 AA82      1548            mov     r2,dpl
0509 AB83      1549            mov     r3,dph
050B ACF0      1550            mov     r4,b
050D FD        1551            mov     r5,a
050E E581      1552            mov     a,sp
0510 24FC      1553            add     a,#0xfc
0512 F581      1554            mov     sp,a
0514 C0F8      1555            push    _main_vRef_1_125
0516 C0F9      1556            push    (_main_vRef_1_125 + 1)
0518 C0FA      1557            push    (_main_vRef_1_125 + 2)
051A C0FB      1558            push    (_main_vRef_1_125 + 3)
051C 8A82      1559            mov     dpl,r2
051E 8B83      1560            mov     dph,r3
0520 8CF0      1561            mov     b,r4
0522 ED        1562            mov     a,r5
0523 120000    1563            lcall   ___fsgt
0526 AA82      1564            mov     r2,dpl
0528 E581      1565            mov     a,sp
052A 24FC      1566            add     a,#0xfc
052C F581      1567            mov     sp,a
052E EA        1568            mov     a,r2
052F 7000      1569            jnz     L018065?
0531 020000    1570            ljmp    L018030?
0534           1571   L018065?:
0534           1572   ;        ADC.c:395: pwm_right_motor = (sqrtf(0 + powf(v[0] - vRef,2.0))/Q1)*100.0;
0534 C0F8      1573            push    _main_vRef_1_125
0536 C0F9      1574            push    (_main_vRef_1_125 + 1)
0538 C0FA      1575            push    (_main_vRef_1_125 + 2)
053A C0FB      1576            push    (_main_vRef_1_125 + 3)
053C 85A882    1577            mov     dpl,_main_v_1_125
053F 85A983    1578            mov     dph,(_main_v_1_125 + 1)
0542 85AAF0    1579            mov     b,(_main_v_1_125 + 2)
0545 E5AB      1580            mov     a,(_main_v_1_125 + 3)
0547 120000    1581            lcall   ___fssub
054A AA82      1582            mov     r2,dpl
054C AB83      1583            mov     r3,dph
054E ACF0      1584            mov     r4,b
0550 FD        1585            mov     r5,a
0551 E581      1586            mov     a,sp
0553 24FC      1587            add     a,#0xfc
0555 F581      1588            mov     sp,a
0557 750000    1589            mov     _powf_PARM_2,#0x00
055A 750100    1590            mov     (_powf_PARM_2 + 1),#0x00
055D 750200    1591            mov     (_powf_PARM_2 + 2),#0x00
0560 750340    1592            mov     (_powf_PARM_2 + 3),#0x40
0563 8A82      1593            mov     dpl,r2
0565 8B83      1594            mov     dph,r3
0567 8CF0      1595            mov     b,r4
0569 ED        1596            mov     a,r5
056A 120000    1597            lcall   _powf
056D 120000    1598            lcall   _sqrtf
0570           1599   ;        ADC.c:396: pwm_left_motor = (sqrtf(powf(v[1] - vRef,2.0) + powf(v[0] - vRef,2.0))/Q1)*100.0;
0570 C0F8      1600            push    _main_vRef_1_125
0572 C0F9      1601            push    (_main_vRef_1_125 + 1)
0574 C0FA      1602            push    (_main_vRef_1_125 + 2)
0576 C0FB      1603            push    (_main_vRef_1_125 + 3)
0578 85AC82    1604            mov     dpl,(_main_v_1_125 + 0x0004)
057B 85AD83    1605            mov     dph,((_main_v_1_125 + 0x0004) + 1)
057E 85AEF0    1606            mov     b,((_main_v_1_125 + 0x0004) + 2)
0581 E5AF      1607            mov     a,((_main_v_1_125 + 0x0004) + 3)
0583 120000    1608            lcall   ___fssub
0586 AA82      1609            mov     r2,dpl
0588 AB83      1610            mov     r3,dph
058A ACF0      1611            mov     r4,b
058C FD        1612            mov     r5,a
058D E581      1613            mov     a,sp
058F 24FC      1614            add     a,#0xfc
0591 F581      1615            mov     sp,a
0593 750000    1616            mov     _powf_PARM_2,#0x00
0596 750100    1617            mov     (_powf_PARM_2 + 1),#0x00
0599 750200    1618            mov     (_powf_PARM_2 + 2),#0x00
059C 750340    1619            mov     (_powf_PARM_2 + 3),#0x40
059F 8A82      1620            mov     dpl,r2
05A1 8B83      1621            mov     dph,r3
05A3 8CF0      1622            mov     b,r4
05A5 ED        1623            mov     a,r5
05A6 120000    1624            lcall   _powf
05A9 858238    1625            mov     _main_sloc0_1_0,dpl
05AC 858339    1626            mov     (_main_sloc0_1_0 + 1),dph
05AF 85F03A    1627            mov     (_main_sloc0_1_0 + 2),b
05B2 F53B      1628            mov     (_main_sloc0_1_0 + 3),a
05B4 C0F8      1629            push    _main_vRef_1_125
05B6 C0F9      1630            push    (_main_vRef_1_125 + 1)
05B8 C0FA      1631            push    (_main_vRef_1_125 + 2)
05BA C0FB      1632            push    (_main_vRef_1_125 + 3)
05BC 85A882    1633            mov     dpl,_main_v_1_125
05BF 85A983    1634            mov     dph,(_main_v_1_125 + 1)
05C2 85AAF0    1635            mov     b,(_main_v_1_125 + 2)
05C5 E5AB      1636            mov     a,(_main_v_1_125 + 3)
05C7 120000    1637            lcall   ___fssub
05CA AE82      1638            mov     r6,dpl
05CC AF83      1639            mov     r7,dph
05CE AAF0      1640            mov     r2,b
05D0 FB        1641            mov     r3,a
05D1 E581      1642            mov     a,sp
05D3 24FC      1643            add     a,#0xfc
05D5 F581      1644            mov     sp,a
05D7 750000    1645            mov     _powf_PARM_2,#0x00
05DA 750100    1646            mov     (_powf_PARM_2 + 1),#0x00
05DD 750200    1647            mov     (_powf_PARM_2 + 2),#0x00
05E0 750340    1648            mov     (_powf_PARM_2 + 3),#0x40
05E3 8E82      1649            mov     dpl,r6
05E5 8F83      1650            mov     dph,r7
05E7 8AF0      1651            mov     b,r2
05E9 EB        1652            mov     a,r3
05EA 120000    1653            lcall   _powf
05ED AA82      1654            mov     r2,dpl
05EF AB83      1655            mov     r3,dph
05F1 ACF0      1656            mov     r4,b
05F3 FD        1657            mov     r5,a
05F4 C002      1658            push    ar2
05F6 C003      1659            push    ar3
05F8 C004      1660            push    ar4
05FA C005      1661            push    ar5
05FC 853882    1662            mov     dpl,_main_sloc0_1_0
05FF 853983    1663            mov     dph,(_main_sloc0_1_0 + 1)
0602 853AF0    1664            mov     b,(_main_sloc0_1_0 + 2)
0605 E53B      1665            mov     a,(_main_sloc0_1_0 + 3)
0607 120000    1666            lcall   ___fsadd
060A AA82      1667            mov     r2,dpl
060C AB83      1668            mov     r3,dph
060E ACF0      1669            mov     r4,b
0610 FD        1670            mov     r5,a
0611 E581      1671            mov     a,sp
0613 24FC      1672            add     a,#0xfc
0615 F581      1673            mov     sp,a
0617 8A82      1674            mov     dpl,r2
0619 8B83      1675            mov     dph,r3
061B 8CF0      1676            mov     b,r4
061D ED        1677            mov     a,r5
061E 120000    1678            lcall   _sqrtf
0621           1679   ;        ADC.c:398: Quadrant = 1;
0621 020000    1680            ljmp    L018034?
0624           1681   L018030?:
0624           1682   ;        ADC.c:401: else if(v[1] + 0.2 < vRef && v[0] - 0.2 > vRef) //Quadrant 2 (Top Left)
0624 74CD      1683            mov     a,#0xCD
0626 C0E0      1684            push    acc
0628 74CC      1685            mov     a,#0xCC
062A C0E0      1686            push    acc
062C 744C      1687            mov     a,#0x4C
062E C0E0      1688            push    acc
0630 743E      1689            mov     a,#0x3E
0632 C0E0      1690            push    acc
0634 85AC82    1691            mov     dpl,(_main_v_1_125 + 0x0004)
0637 85AD83    1692            mov     dph,((_main_v_1_125 + 0x0004) + 1)
063A 85AEF0    1693            mov     b,((_main_v_1_125 + 0x0004) + 2)
063D E5AF      1694            mov     a,((_main_v_1_125 + 0x0004) + 3)
063F 120000    1695            lcall   ___fsadd
0642 AA82      1696            mov     r2,dpl
0644 AB83      1697            mov     r3,dph
0646 ACF0      1698            mov     r4,b
0648 FD        1699            mov     r5,a
0649 E581      1700            mov     a,sp
064B 24FC      1701            add     a,#0xfc
064D F581      1702            mov     sp,a
064F C0F8      1703            push    _main_vRef_1_125
0651 C0F9      1704            push    (_main_vRef_1_125 + 1)
0653 C0FA      1705            push    (_main_vRef_1_125 + 2)
0655 C0FB      1706            push    (_main_vRef_1_125 + 3)
0657 8A82      1707            mov     dpl,r2
0659 8B83      1708            mov     dph,r3
065B 8CF0      1709            mov     b,r4
065D ED        1710            mov     a,r5
065E 120000    1711            lcall   ___fslt
0661 AA82      1712            mov     r2,dpl
0663 E581      1713            mov     a,sp
0665 24FC      1714            add     a,#0xfc
0667 F581      1715            mov     sp,a
0669 EA        1716            mov     a,r2
066A 7000      1717            jnz     L018066?
066C 020000    1718            ljmp    L018026?
066F           1719   L018066?:
066F 74CD      1720            mov     a,#0xCD
0671 C0E0      1721            push    acc
0673 74CC      1722            mov     a,#0xCC
0675 C0E0      1723            push    acc
0677 744C      1724            mov     a,#0x4C
0679 C0E0      1725            push    acc
067B 743E      1726            mov     a,#0x3E
067D C0E0      1727            push    acc
067F 85A882    1728            mov     dpl,_main_v_1_125
0682 85A983    1729            mov     dph,(_main_v_1_125 + 1)
0685 85AAF0    1730            mov     b,(_main_v_1_125 + 2)
0688 E5AB      1731            mov     a,(_main_v_1_125 + 3)
068A 120000    1732            lcall   ___fssub
068D AA82      1733            mov     r2,dpl
068F AB83      1734            mov     r3,dph
0691 ACF0      1735            mov     r4,b
0693 FD        1736            mov     r5,a
0694 E581      1737            mov     a,sp
0696 24FC      1738            add     a,#0xfc
0698 F581      1739            mov     sp,a
069A C0F8      1740            push    _main_vRef_1_125
069C C0F9      1741            push    (_main_vRef_1_125 + 1)
069E C0FA      1742            push    (_main_vRef_1_125 + 2)
06A0 C0FB      1743            push    (_main_vRef_1_125 + 3)
06A2 8A82      1744            mov     dpl,r2
06A4 8B83      1745            mov     dph,r3
06A6 8CF0      1746            mov     b,r4
06A8 ED        1747            mov     a,r5
06A9 120000    1748            lcall   ___fsgt
06AC AA82      1749            mov     r2,dpl
06AE E581      1750            mov     a,sp
06B0 24FC      1751            add     a,#0xfc
06B2 F581      1752            mov     sp,a
06B4 EA        1753            mov     a,r2
06B5 7000      1754            jnz     L018067?
06B7 020000    1755            ljmp    L018026?
06BA           1756   L018067?:
06BA           1757   ;        ADC.c:403: pwm_right_motor = (sqrtf(powf(v[0] - vRef,2.0) + powf(vXYScalingFactor*(vRef - v[1]),2.0))/Q2)*100.0;
06BA C0F8      1758            push    _main_vRef_1_125
06BC C0F9      1759            push    (_main_vRef_1_125 + 1)
06BE C0FA      1760            push    (_main_vRef_1_125 + 2)
06C0 C0FB      1761            push    (_main_vRef_1_125 + 3)
06C2 85A882    1762            mov     dpl,_main_v_1_125
06C5 85A983    1763            mov     dph,(_main_v_1_125 + 1)
06C8 85AAF0    1764            mov     b,(_main_v_1_125 + 2)
06CB E5AB      1765            mov     a,(_main_v_1_125 + 3)
06CD 120000    1766            lcall   ___fssub
06D0 AA82      1767            mov     r2,dpl
06D2 AB83      1768            mov     r3,dph
06D4 ACF0      1769            mov     r4,b
06D6 FD        1770            mov     r5,a
06D7 E581      1771            mov     a,sp
06D9 24FC      1772            add     a,#0xfc
06DB F581      1773            mov     sp,a
06DD 750000    1774            mov     _powf_PARM_2,#0x00
06E0 750100    1775            mov     (_powf_PARM_2 + 1),#0x00
06E3 750200    1776            mov     (_powf_PARM_2 + 2),#0x00
06E6 750340    1777            mov     (_powf_PARM_2 + 3),#0x40
06E9 8A82      1778            mov     dpl,r2
06EB 8B83      1779            mov     dph,r3
06ED 8CF0      1780            mov     b,r4
06EF ED        1781            mov     a,r5
06F0 120000    1782            lcall   _powf
06F3 858238    1783            mov     _main_sloc0_1_0,dpl
06F6 858339    1784            mov     (_main_sloc0_1_0 + 1),dph
06F9 85F03A    1785            mov     (_main_sloc0_1_0 + 2),b
06FC F53B      1786            mov     (_main_sloc0_1_0 + 3),a
06FE C0AC      1787            push    (_main_v_1_125 + 0x0004)
0700 C0AD      1788            push    ((_main_v_1_125 + 0x0004) + 1)
0702 C0AE      1789            push    ((_main_v_1_125 + 0x0004) + 2)
0704 C0AF      1790            push    ((_main_v_1_125 + 0x0004) + 3)
0706 85F882    1791            mov     dpl,_main_vRef_1_125
0709 85F983    1792            mov     dph,(_main_vRef_1_125 + 1)
070C 85FAF0    1793            mov     b,(_main_vRef_1_125 + 2)
070F E5FB      1794            mov     a,(_main_vRef_1_125 + 3)
0711 120000    1795            lcall   ___fssub
0714 AE82      1796            mov     r6,dpl
0716 AF83      1797            mov     r7,dph
0718 AAF0      1798            mov     r2,b
071A FB        1799            mov     r3,a
071B E581      1800            mov     a,sp
071D 24FC      1801            add     a,#0xfc
071F F581      1802            mov     sp,a
0721 C006      1803            push    ar6
0723 C007      1804            push    ar7
0725 C002      1805            push    ar2
0727 C003      1806            push    ar3
0729 90D09E    1807            mov     dptr,#0xD09E
072C 75F0D2    1808            mov     b,#0xD2
072F 743E      1809            mov     a,#0x3E
0731 120000    1810            lcall   ___fsmul
0734 AA82      1811            mov     r2,dpl
0736 AB83      1812            mov     r3,dph
0738 ACF0      1813            mov     r4,b
073A FD        1814            mov     r5,a
073B E581      1815            mov     a,sp
073D 24FC      1816            add     a,#0xfc
073F F581      1817            mov     sp,a
0741 750000    1818            mov     _powf_PARM_2,#0x00
0744 750100    1819            mov     (_powf_PARM_2 + 1),#0x00
0747 750200    1820            mov     (_powf_PARM_2 + 2),#0x00
074A 750340    1821            mov     (_powf_PARM_2 + 3),#0x40
074D 8A82      1822            mov     dpl,r2
074F 8B83      1823            mov     dph,r3
0751 8CF0      1824            mov     b,r4
0753 ED        1825            mov     a,r5
0754 120000    1826            lcall   _powf
0757 AA82      1827            mov     r2,dpl
0759 AB83      1828            mov     r3,dph
075B ACF0      1829            mov     r4,b
075D FD        1830            mov     r5,a
075E C002      1831            push    ar2
0760 C003      1832            push    ar3
0762 C004      1833            push    ar4
0764 C005      1834            push    ar5
0766 853882    1835            mov     dpl,_main_sloc0_1_0
0769 853983    1836            mov     dph,(_main_sloc0_1_0 + 1)
076C 853AF0    1837            mov     b,(_main_sloc0_1_0 + 2)
076F E53B      1838            mov     a,(_main_sloc0_1_0 + 3)
0771 120000    1839            lcall   ___fsadd
0774 AA82      1840            mov     r2,dpl
0776 AB83      1841            mov     r3,dph
0778 ACF0      1842            mov     r4,b
077A FD        1843            mov     r5,a
077B E581      1844            mov     a,sp
077D 24FC      1845            add     a,#0xfc
077F F581      1846            mov     sp,a
0781 8A82      1847            mov     dpl,r2
0783 8B83      1848            mov     dph,r3
0785 8CF0      1849            mov     b,r4
0787 ED        1850            mov     a,r5
0788 120000    1851            lcall   _sqrtf
078B           1852   ;        ADC.c:404: pwm_left_motor = (sqrtf(0 + powf(v[0]-vRef,2.0))/Q2)*100.0;
078B C0F8      1853            push    _main_vRef_1_125
078D C0F9      1854            push    (_main_vRef_1_125 + 1)
078F C0FA      1855            push    (_main_vRef_1_125 + 2)
0791 C0FB      1856            push    (_main_vRef_1_125 + 3)
0793 85A882    1857            mov     dpl,_main_v_1_125
0796 85A983    1858            mov     dph,(_main_v_1_125 + 1)
0799 85AAF0    1859            mov     b,(_main_v_1_125 + 2)
079C E5AB      1860            mov     a,(_main_v_1_125 + 3)
079E 120000    1861            lcall   ___fssub
07A1 AA82      1862            mov     r2,dpl
07A3 AB83      1863            mov     r3,dph
07A5 ACF0      1864            mov     r4,b
07A7 FD        1865            mov     r5,a
07A8 E581      1866            mov     a,sp
07AA 24FC      1867            add     a,#0xfc
07AC F581      1868            mov     sp,a
07AE 750000    1869            mov     _powf_PARM_2,#0x00
07B1 750100    1870            mov     (_powf_PARM_2 + 1),#0x00
07B4 750200    1871            mov     (_powf_PARM_2 + 2),#0x00
07B7 750340    1872            mov     (_powf_PARM_2 + 3),#0x40
07BA 8A82      1873            mov     dpl,r2
07BC 8B83      1874            mov     dph,r3
07BE 8CF0      1875            mov     b,r4
07C0 ED        1876            mov     a,r5
07C1 120000    1877            lcall   _powf
07C4 120000    1878            lcall   _sqrtf
07C7           1879   ;        ADC.c:406: Quadrant = 2;
07C7 020000    1880            ljmp    L018034?
07CA           1881   L018026?:
07CA           1882   ;        ADC.c:408: else if(v[1] + 0.2 < vRef && v[0] + 0.2 < vRef) //Quadrant 3 (Bottom Left)
07CA 74CD      1883            mov     a,#0xCD
07CC C0E0      1884            push    acc
07CE 74CC      1885            mov     a,#0xCC
07D0 C0E0      1886            push    acc
07D2 744C      1887            mov     a,#0x4C
07D4 C0E0      1888            push    acc
07D6 743E      1889            mov     a,#0x3E
07D8 C0E0      1890            push    acc
07DA 85AC82    1891            mov     dpl,(_main_v_1_125 + 0x0004)
07DD 85AD83    1892            mov     dph,((_main_v_1_125 + 0x0004) + 1)
07E0 85AEF0    1893            mov     b,((_main_v_1_125 + 0x0004) + 2)
07E3 E5AF      1894            mov     a,((_main_v_1_125 + 0x0004) + 3)
07E5 120000    1895            lcall   ___fsadd
07E8 AA82      1896            mov     r2,dpl
07EA AB83      1897            mov     r3,dph
07EC ACF0      1898            mov     r4,b
07EE FD        1899            mov     r5,a
07EF E581      1900            mov     a,sp
07F1 24FC      1901            add     a,#0xfc
07F3 F581      1902            mov     sp,a
07F5 C0F8      1903            push    _main_vRef_1_125
07F7 C0F9      1904            push    (_main_vRef_1_125 + 1)
07F9 C0FA      1905            push    (_main_vRef_1_125 + 2)
07FB C0FB      1906            push    (_main_vRef_1_125 + 3)
07FD 8A82      1907            mov     dpl,r2
07FF 8B83      1908            mov     dph,r3
0801 8CF0      1909            mov     b,r4
0803 ED        1910            mov     a,r5
0804 120000    1911            lcall   ___fslt
0807 AA82      1912            mov     r2,dpl
0809 E581      1913            mov     a,sp
080B 24FC      1914            add     a,#0xfc
080D F581      1915            mov     sp,a
080F EA        1916            mov     a,r2
0810 7000      1917            jnz     L018068?
0812 020000    1918            ljmp    L018022?
0815           1919   L018068?:
0815 74CD      1920            mov     a,#0xCD
0817 C0E0      1921            push    acc
0819 74CC      1922            mov     a,#0xCC
081B C0E0      1923            push    acc
081D 744C      1924            mov     a,#0x4C
081F C0E0      1925            push    acc
0821 743E      1926            mov     a,#0x3E
0823 C0E0      1927            push    acc
0825 85A882    1928            mov     dpl,_main_v_1_125
0828 85A983    1929            mov     dph,(_main_v_1_125 + 1)
082B 85AAF0    1930            mov     b,(_main_v_1_125 + 2)
082E E5AB      1931            mov     a,(_main_v_1_125 + 3)
0830 120000    1932            lcall   ___fsadd
0833 AA82      1933            mov     r2,dpl
0835 AB83      1934            mov     r3,dph
0837 ACF0      1935            mov     r4,b
0839 FD        1936            mov     r5,a
083A E581      1937            mov     a,sp
083C 24FC      1938            add     a,#0xfc
083E F581      1939            mov     sp,a
0840 C0F8      1940            push    _main_vRef_1_125
0842 C0F9      1941            push    (_main_vRef_1_125 + 1)
0844 C0FA      1942            push    (_main_vRef_1_125 + 2)
0846 C0FB      1943            push    (_main_vRef_1_125 + 3)
0848 8A82      1944            mov     dpl,r2
084A 8B83      1945            mov     dph,r3
084C 8CF0      1946            mov     b,r4
084E ED        1947            mov     a,r5
084F 120000    1948            lcall   ___fslt
0852 AA82      1949            mov     r2,dpl
0854 E581      1950            mov     a,sp
0856 24FC      1951            add     a,#0xfc
0858 F581      1952            mov     sp,a
085A EA        1953            mov     a,r2
085B 7000      1954            jnz     L018069?
085D 020000    1955            ljmp    L018022?
0860           1956   L018069?:
0860           1957   ;        ADC.c:410: pwm_right_motor = (sqrtf(powf(vXYScalingFactor*(vRef - v[0]),2.0) + powf(vXYScalingFactor*(vRef - v[1]),2.0))/Q3)*100.0;
0860 C0A8      1958            push    _main_v_1_125
0862 C0A9      1959            push    (_main_v_1_125 + 1)
0864 C0AA      1960            push    (_main_v_1_125 + 2)
0866 C0AB      1961            push    (_main_v_1_125 + 3)
0868 85F882    1962            mov     dpl,_main_vRef_1_125
086B 85F983    1963            mov     dph,(_main_vRef_1_125 + 1)
086E 85FAF0    1964            mov     b,(_main_vRef_1_125 + 2)
0871 E5FB      1965            mov     a,(_main_vRef_1_125 + 3)
0873 120000    1966            lcall   ___fssub
0876 AA82      1967            mov     r2,dpl
0878 AB83      1968            mov     r3,dph
087A ACF0      1969            mov     r4,b
087C FD        1970            mov     r5,a
087D E581      1971            mov     a,sp
087F 24FC      1972            add     a,#0xfc
0881 F581      1973            mov     sp,a
0883 C002      1974            push    ar2
0885 C003      1975            push    ar3
0887 C004      1976            push    ar4
0889 C005      1977            push    ar5
088B 90D09E    1978            mov     dptr,#0xD09E
088E 75F0D2    1979            mov     b,#0xD2
0891 743E      1980            mov     a,#0x3E
0893 120000    1981            lcall   ___fsmul
0896 AA82      1982            mov     r2,dpl
0898 AB83      1983            mov     r3,dph
089A ACF0      1984            mov     r4,b
089C FD        1985            mov     r5,a
089D E581      1986            mov     a,sp
089F 24FC      1987            add     a,#0xfc
08A1 F581      1988            mov     sp,a
08A3 750000    1989            mov     _powf_PARM_2,#0x00
08A6 750100    1990            mov     (_powf_PARM_2 + 1),#0x00
08A9 750200    1991            mov     (_powf_PARM_2 + 2),#0x00
08AC 750340    1992            mov     (_powf_PARM_2 + 3),#0x40
08AF 8A82      1993            mov     dpl,r2
08B1 8B83      1994            mov     dph,r3
08B3 8CF0      1995            mov     b,r4
08B5 ED        1996            mov     a,r5
08B6 120000    1997            lcall   _powf
08B9 858238    1998            mov     _main_sloc0_1_0,dpl
08BC 858339    1999            mov     (_main_sloc0_1_0 + 1),dph
08BF 85F03A    2000            mov     (_main_sloc0_1_0 + 2),b
08C2 F53B      2001            mov     (_main_sloc0_1_0 + 3),a
08C4 C0AC      2002            push    (_main_v_1_125 + 0x0004)
08C6 C0AD      2003            push    ((_main_v_1_125 + 0x0004) + 1)
08C8 C0AE      2004            push    ((_main_v_1_125 + 0x0004) + 2)
08CA C0AF      2005            push    ((_main_v_1_125 + 0x0004) + 3)
08CC 85F882    2006            mov     dpl,_main_vRef_1_125
08CF 85F983    2007            mov     dph,(_main_vRef_1_125 + 1)
08D2 85FAF0    2008            mov     b,(_main_vRef_1_125 + 2)
08D5 E5FB      2009            mov     a,(_main_vRef_1_125 + 3)
08D7 120000    2010            lcall   ___fssub
08DA AE82      2011            mov     r6,dpl
08DC AF83      2012            mov     r7,dph
08DE AAF0      2013            mov     r2,b
08E0 FB        2014            mov     r3,a
08E1 E581      2015            mov     a,sp
08E3 24FC      2016            add     a,#0xfc
08E5 F581      2017            mov     sp,a
08E7 C006      2018            push    ar6
08E9 C007      2019            push    ar7
08EB C002      2020            push    ar2
08ED C003      2021            push    ar3
08EF 90D09E    2022            mov     dptr,#0xD09E
08F2 75F0D2    2023            mov     b,#0xD2
08F5 743E      2024            mov     a,#0x3E
08F7 120000    2025            lcall   ___fsmul
08FA AA82      2026            mov     r2,dpl
08FC AB83      2027            mov     r3,dph
08FE ACF0      2028            mov     r4,b
0900 FD        2029            mov     r5,a
0901 E581      2030            mov     a,sp
0903 24FC      2031            add     a,#0xfc
0905 F581      2032            mov     sp,a
0907 750000    2033            mov     _powf_PARM_2,#0x00
090A 750100    2034            mov     (_powf_PARM_2 + 1),#0x00
090D 750200    2035            mov     (_powf_PARM_2 + 2),#0x00
0910 750340    2036            mov     (_powf_PARM_2 + 3),#0x40
0913 8A82      2037            mov     dpl,r2
0915 8B83      2038            mov     dph,r3
0917 8CF0      2039            mov     b,r4
0919 ED        2040            mov     a,r5
091A 120000    2041            lcall   _powf
091D AA82      2042            mov     r2,dpl
091F AB83      2043            mov     r3,dph
0921 ACF0      2044            mov     r4,b
0923 FD        2045            mov     r5,a
0924 C002      2046            push    ar2
0926 C003      2047            push    ar3
0928 C004      2048            push    ar4
092A C005      2049            push    ar5
092C 853882    2050            mov     dpl,_main_sloc0_1_0
092F 853983    2051            mov     dph,(_main_sloc0_1_0 + 1)
0932 853AF0    2052            mov     b,(_main_sloc0_1_0 + 2)
0935 E53B      2053            mov     a,(_main_sloc0_1_0 + 3)
0937 120000    2054            lcall   ___fsadd
093A AA82      2055            mov     r2,dpl
093C AB83      2056            mov     r3,dph
093E ACF0      2057            mov     r4,b
0940 FD        2058            mov     r5,a
0941 E581      2059            mov     a,sp
0943 24FC      2060            add     a,#0xfc
0945 F581      2061            mov     sp,a
0947 8A82      2062            mov     dpl,r2
0949 8B83      2063            mov     dph,r3
094B 8CF0      2064            mov     b,r4
094D ED        2065            mov     a,r5
094E 120000    2066            lcall   _sqrtf
0951           2067   ;        ADC.c:411: pwm_left_motor = (sqrtf(0 + powf(vXYScalingFactor*(vRef - v[0]),2.0))/Q3)*100.0;
0951 C0A8      2068            push    _main_v_1_125
0953 C0A9      2069            push    (_main_v_1_125 + 1)
0955 C0AA      2070            push    (_main_v_1_125 + 2)
0957 C0AB      2071            push    (_main_v_1_125 + 3)
0959 85F882    2072            mov     dpl,_main_vRef_1_125
095C 85F983    2073            mov     dph,(_main_vRef_1_125 + 1)
095F 85FAF0    2074            mov     b,(_main_vRef_1_125 + 2)
0962 E5FB      2075            mov     a,(_main_vRef_1_125 + 3)
0964 120000    2076            lcall   ___fssub
0967 AA82      2077            mov     r2,dpl
0969 AB83      2078            mov     r3,dph
096B ACF0      2079            mov     r4,b
096D FD        2080            mov     r5,a
096E E581      2081            mov     a,sp
0970 24FC      2082            add     a,#0xfc
0972 F581      2083            mov     sp,a
0974 C002      2084            push    ar2
0976 C003      2085            push    ar3
0978 C004      2086            push    ar4
097A C005      2087            push    ar5
097C 90D09E    2088            mov     dptr,#0xD09E
097F 75F0D2    2089            mov     b,#0xD2
0982 743E      2090            mov     a,#0x3E
0984 120000    2091            lcall   ___fsmul
0987 AA82      2092            mov     r2,dpl
0989 AB83      2093            mov     r3,dph
098B ACF0      2094            mov     r4,b
098D FD        2095            mov     r5,a
098E E581      2096            mov     a,sp
0990 24FC      2097            add     a,#0xfc
0992 F581      2098            mov     sp,a
0994 750000    2099            mov     _powf_PARM_2,#0x00
0997 750100    2100            mov     (_powf_PARM_2 + 1),#0x00
099A 750200    2101            mov     (_powf_PARM_2 + 2),#0x00
099D 750340    2102            mov     (_powf_PARM_2 + 3),#0x40
09A0 8A82      2103            mov     dpl,r2
09A2 8B83      2104            mov     dph,r3
09A4 8CF0      2105            mov     b,r4
09A6 ED        2106            mov     a,r5
09A7 120000    2107            lcall   _powf
09AA 120000    2108            lcall   _sqrtf
09AD           2109   ;        ADC.c:413: Quadrant = 3;
09AD 020000    2110            ljmp    L018034?
09B0           2111   L018022?:
09B0           2112   ;        ADC.c:415: else if(v[1] - 0.2 > vRef && v[0] + 0.2 < vRef) //Quadrant 4 (Bottom Right)
09B0 74CD      2113            mov     a,#0xCD
09B2 C0E0      2114            push    acc
09B4 74CC      2115            mov     a,#0xCC
09B6 C0E0      2116            push    acc
09B8 744C      2117            mov     a,#0x4C
09BA C0E0      2118            push    acc
09BC 743E      2119            mov     a,#0x3E
09BE C0E0      2120            push    acc
09C0 85AC82    2121            mov     dpl,(_main_v_1_125 + 0x0004)
09C3 85AD83    2122            mov     dph,((_main_v_1_125 + 0x0004) + 1)
09C6 85AEF0    2123            mov     b,((_main_v_1_125 + 0x0004) + 2)
09C9 E5AF      2124            mov     a,((_main_v_1_125 + 0x0004) + 3)
09CB 120000    2125            lcall   ___fssub
09CE AA82      2126            mov     r2,dpl
09D0 AB83      2127            mov     r3,dph
09D2 ACF0      2128            mov     r4,b
09D4 FD        2129            mov     r5,a
09D5 E581      2130            mov     a,sp
09D7 24FC      2131            add     a,#0xfc
09D9 F581      2132            mov     sp,a
09DB C0F8      2133            push    _main_vRef_1_125
09DD C0F9      2134            push    (_main_vRef_1_125 + 1)
09DF C0FA      2135            push    (_main_vRef_1_125 + 2)
09E1 C0FB      2136            push    (_main_vRef_1_125 + 3)
09E3 8A82      2137            mov     dpl,r2
09E5 8B83      2138            mov     dph,r3
09E7 8CF0      2139            mov     b,r4
09E9 ED        2140            mov     a,r5
09EA 120000    2141            lcall   ___fsgt
09ED AA82      2142            mov     r2,dpl
09EF E581      2143            mov     a,sp
09F1 24FC      2144            add     a,#0xfc
09F3 F581      2145            mov     sp,a
09F5 EA        2146            mov     a,r2
09F6 7000      2147            jnz     L018070?
09F8 020000    2148            ljmp    L018018?
09FB           2149   L018070?:
09FB 74CD      2150            mov     a,#0xCD
09FD C0E0      2151            push    acc
09FF 74CC      2152            mov     a,#0xCC
0A01 C0E0      2153            push    acc
0A03 744C      2154            mov     a,#0x4C
0A05 C0E0      2155            push    acc
0A07 743E      2156            mov     a,#0x3E
0A09 C0E0      2157            push    acc
0A0B 85A882    2158            mov     dpl,_main_v_1_125
0A0E 85A983    2159            mov     dph,(_main_v_1_125 + 1)
0A11 85AAF0    2160            mov     b,(_main_v_1_125 + 2)
0A14 E5AB      2161            mov     a,(_main_v_1_125 + 3)
0A16 120000    2162            lcall   ___fsadd
0A19 AA82      2163            mov     r2,dpl
0A1B AB83      2164            mov     r3,dph
0A1D ACF0      2165            mov     r4,b
0A1F FD        2166            mov     r5,a
0A20 E581      2167            mov     a,sp
0A22 24FC      2168            add     a,#0xfc
0A24 F581      2169            mov     sp,a
0A26 C0F8      2170            push    _main_vRef_1_125
0A28 C0F9      2171            push    (_main_vRef_1_125 + 1)
0A2A C0FA      2172            push    (_main_vRef_1_125 + 2)
0A2C C0FB      2173            push    (_main_vRef_1_125 + 3)
0A2E 8A82      2174            mov     dpl,r2
0A30 8B83      2175            mov     dph,r3
0A32 8CF0      2176            mov     b,r4
0A34 ED        2177            mov     a,r5
0A35 120000    2178            lcall   ___fslt
0A38 AA82      2179            mov     r2,dpl
0A3A E581      2180            mov     a,sp
0A3C 24FC      2181            add     a,#0xfc
0A3E F581      2182            mov     sp,a
0A40 EA        2183            mov     a,r2
0A41 7000      2184            jnz     L018071?
0A43 020000    2185            ljmp    L018018?
0A46           2186   L018071?:
0A46           2187   ;        ADC.c:417: pwm_right_motor = (sqrtf(0 + powf(vXYScalingFactor*(vRef - v[0]),2.0))/Q4)*100.0;
0A46 C0A8      2188            push    _main_v_1_125
0A48 C0A9      2189            push    (_main_v_1_125 + 1)
0A4A C0AA      2190            push    (_main_v_1_125 + 2)
0A4C C0AB      2191            push    (_main_v_1_125 + 3)
0A4E 85F882    2192            mov     dpl,_main_vRef_1_125
0A51 85F983    2193            mov     dph,(_main_vRef_1_125 + 1)
0A54 85FAF0    2194            mov     b,(_main_vRef_1_125 + 2)
0A57 E5FB      2195            mov     a,(_main_vRef_1_125 + 3)
0A59 120000    2196            lcall   ___fssub
0A5C AA82      2197            mov     r2,dpl
0A5E AB83      2198            mov     r3,dph
0A60 ACF0      2199            mov     r4,b
0A62 FD        2200            mov     r5,a
0A63 E581      2201            mov     a,sp
0A65 24FC      2202            add     a,#0xfc
0A67 F581      2203            mov     sp,a
0A69 C002      2204            push    ar2
0A6B C003      2205            push    ar3
0A6D C004      2206            push    ar4
0A6F C005      2207            push    ar5
0A71 90D09E    2208            mov     dptr,#0xD09E
0A74 75F0D2    2209            mov     b,#0xD2
0A77 743E      2210            mov     a,#0x3E
0A79 120000    2211            lcall   ___fsmul
0A7C AA82      2212            mov     r2,dpl
0A7E AB83      2213            mov     r3,dph
0A80 ACF0      2214            mov     r4,b
0A82 FD        2215            mov     r5,a
0A83 E581      2216            mov     a,sp
0A85 24FC      2217            add     a,#0xfc
0A87 F581      2218            mov     sp,a
0A89 750000    2219            mov     _powf_PARM_2,#0x00
0A8C 750100    2220            mov     (_powf_PARM_2 + 1),#0x00
0A8F 750200    2221            mov     (_powf_PARM_2 + 2),#0x00
0A92 750340    2222            mov     (_powf_PARM_2 + 3),#0x40
0A95 8A82      2223            mov     dpl,r2
0A97 8B83      2224            mov     dph,r3
0A99 8CF0      2225            mov     b,r4
0A9B ED        2226            mov     a,r5
0A9C 120000    2227            lcall   _powf
0A9F 120000    2228            lcall   _sqrtf
0AA2           2229   ;        ADC.c:418: pwm_left_motor = (sqrtf(powf(v[1] - vRef,2.0) + powf(vXYScalingFactor*(vRef - v[0]),2.0))/Q4)*100.0;
0AA2 C0F8      2230            push    _main_vRef_1_125
0AA4 C0F9      2231            push    (_main_vRef_1_125 + 1)
0AA6 C0FA      2232            push    (_main_vRef_1_125 + 2)
0AA8 C0FB      2233            push    (_main_vRef_1_125 + 3)
0AAA 85AC82    2234            mov     dpl,(_main_v_1_125 + 0x0004)
0AAD 85AD83    2235            mov     dph,((_main_v_1_125 + 0x0004) + 1)
0AB0 85AEF0    2236            mov     b,((_main_v_1_125 + 0x0004) + 2)
0AB3 E5AF      2237            mov     a,((_main_v_1_125 + 0x0004) + 3)
0AB5 120000    2238            lcall   ___fssub
0AB8 AA82      2239            mov     r2,dpl
0ABA AB83      2240            mov     r3,dph
0ABC ACF0      2241            mov     r4,b
0ABE FD        2242            mov     r5,a
0ABF E581      2243            mov     a,sp
0AC1 24FC      2244            add     a,#0xfc
0AC3 F581      2245            mov     sp,a
0AC5 750000    2246            mov     _powf_PARM_2,#0x00
0AC8 750100    2247            mov     (_powf_PARM_2 + 1),#0x00
0ACB 750200    2248            mov     (_powf_PARM_2 + 2),#0x00
0ACE 750340    2249            mov     (_powf_PARM_2 + 3),#0x40
0AD1 8A82      2250            mov     dpl,r2
0AD3 8B83      2251            mov     dph,r3
0AD5 8CF0      2252            mov     b,r4
0AD7 ED        2253            mov     a,r5
0AD8 120000    2254            lcall   _powf
0ADB 858238    2255            mov     _main_sloc0_1_0,dpl
0ADE 858339    2256            mov     (_main_sloc0_1_0 + 1),dph
0AE1 85F03A    2257            mov     (_main_sloc0_1_0 + 2),b
0AE4 F53B      2258            mov     (_main_sloc0_1_0 + 3),a
0AE6 C0A8      2259            push    _main_v_1_125
0AE8 C0A9      2260            push    (_main_v_1_125 + 1)
0AEA C0AA      2261            push    (_main_v_1_125 + 2)
0AEC C0AB      2262            push    (_main_v_1_125 + 3)
0AEE 85F882    2263            mov     dpl,_main_vRef_1_125
0AF1 85F983    2264            mov     dph,(_main_vRef_1_125 + 1)
0AF4 85FAF0    2265            mov     b,(_main_vRef_1_125 + 2)
0AF7 E5FB      2266            mov     a,(_main_vRef_1_125 + 3)
0AF9 120000    2267            lcall   ___fssub
0AFC AE82      2268            mov     r6,dpl
0AFE AF83      2269            mov     r7,dph
0B00 AAF0      2270            mov     r2,b
0B02 FB        2271            mov     r3,a
0B03 E581      2272            mov     a,sp
0B05 24FC      2273            add     a,#0xfc
0B07 F581      2274            mov     sp,a
0B09 C006      2275            push    ar6
0B0B C007      2276            push    ar7
0B0D C002      2277            push    ar2
0B0F C003      2278            push    ar3
0B11 90D09E    2279            mov     dptr,#0xD09E
0B14 75F0D2    2280            mov     b,#0xD2
0B17 743E      2281            mov     a,#0x3E
0B19 120000    2282            lcall   ___fsmul
0B1C AA82      2283            mov     r2,dpl
0B1E AB83      2284            mov     r3,dph
0B20 ACF0      2285            mov     r4,b
0B22 FD        2286            mov     r5,a
0B23 E581      2287            mov     a,sp
0B25 24FC      2288            add     a,#0xfc
0B27 F581      2289            mov     sp,a
0B29 750000    2290            mov     _powf_PARM_2,#0x00
0B2C 750100    2291            mov     (_powf_PARM_2 + 1),#0x00
0B2F 750200    2292            mov     (_powf_PARM_2 + 2),#0x00
0B32 750340    2293            mov     (_powf_PARM_2 + 3),#0x40
0B35 8A82      2294            mov     dpl,r2
0B37 8B83      2295            mov     dph,r3
0B39 8CF0      2296            mov     b,r4
0B3B ED        2297            mov     a,r5
0B3C 120000    2298            lcall   _powf
0B3F AA82      2299            mov     r2,dpl
0B41 AB83      2300            mov     r3,dph
0B43 ACF0      2301            mov     r4,b
0B45 FD        2302            mov     r5,a
0B46 C002      2303            push    ar2
0B48 C003      2304            push    ar3
0B4A C004      2305            push    ar4
0B4C C005      2306            push    ar5
0B4E 853882    2307            mov     dpl,_main_sloc0_1_0
0B51 853983    2308            mov     dph,(_main_sloc0_1_0 + 1)
0B54 853AF0    2309            mov     b,(_main_sloc0_1_0 + 2)
0B57 E53B      2310            mov     a,(_main_sloc0_1_0 + 3)
0B59 120000    2311            lcall   ___fsadd
0B5C AA82      2312            mov     r2,dpl
0B5E AB83      2313            mov     r3,dph
0B60 ACF0      2314            mov     r4,b
0B62 FD        2315            mov     r5,a
0B63 E581      2316            mov     a,sp
0B65 24FC      2317            add     a,#0xfc
0B67 F581      2318            mov     sp,a
0B69 8A82      2319            mov     dpl,r2
0B6B 8B83      2320            mov     dph,r3
0B6D 8CF0      2321            mov     b,r4
0B6F ED        2322            mov     a,r5
0B70 120000    2323            lcall   _sqrtf
0B73           2324   ;        ADC.c:420: Quadrant = 4;
0B73 020000    2325            ljmp    L018034?
0B76           2326   L018018?:
0B76           2327   ;        ADC.c:422: else if(v[1] - 0.2 > vRef && abs(v[0] - vRef) <= 0.1) //Between Quadrant 1 and 4 on +Vx-Axis
0B76 74CD      2328            mov     a,#0xCD
0B78 C0E0      2329            push    acc
0B7A 74CC      2330            mov     a,#0xCC
0B7C C0E0      2331            push    acc
0B7E 744C      2332            mov     a,#0x4C
0B80 C0E0      2333            push    acc
0B82 743E      2334            mov     a,#0x3E
0B84 C0E0      2335            push    acc
0B86 85AC82    2336            mov     dpl,(_main_v_1_125 + 0x0004)
0B89 85AD83    2337            mov     dph,((_main_v_1_125 + 0x0004) + 1)
0B8C 85AEF0    2338            mov     b,((_main_v_1_125 + 0x0004) + 2)
0B8F E5AF      2339            mov     a,((_main_v_1_125 + 0x0004) + 3)
0B91 120000    2340            lcall   ___fssub
0B94 AA82      2341            mov     r2,dpl
0B96 AB83      2342            mov     r3,dph
0B98 ACF0      2343            mov     r4,b
0B9A FD        2344            mov     r5,a
0B9B E581      2345            mov     a,sp
0B9D 24FC      2346            add     a,#0xfc
0B9F F581      2347            mov     sp,a
0BA1 C0F8      2348            push    _main_vRef_1_125
0BA3 C0F9      2349            push    (_main_vRef_1_125 + 1)
0BA5 C0FA      2350            push    (_main_vRef_1_125 + 2)
0BA7 C0FB      2351            push    (_main_vRef_1_125 + 3)
0BA9 8A82      2352            mov     dpl,r2
0BAB 8B83      2353            mov     dph,r3
0BAD 8CF0      2354            mov     b,r4
0BAF ED        2355            mov     a,r5
0BB0 120000    2356            lcall   ___fsgt
0BB3 AA82      2357            mov     r2,dpl
0BB5 E581      2358            mov     a,sp
0BB7 24FC      2359            add     a,#0xfc
0BB9 F581      2360            mov     sp,a
0BBB EA        2361            mov     a,r2
0BBC 6000      2362            jz      L018014?
0BBE C0F8      2363            push    _main_vRef_1_125
0BC0 C0F9      2364            push    (_main_vRef_1_125 + 1)
0BC2 C0FA      2365            push    (_main_vRef_1_125 + 2)
0BC4 C0FB      2366            push    (_main_vRef_1_125 + 3)
0BC6 85A882    2367            mov     dpl,_main_v_1_125
0BC9 85A983    2368            mov     dph,(_main_v_1_125 + 1)
0BCC 85AAF0    2369            mov     b,(_main_v_1_125 + 2)
0BCF E5AB      2370            mov     a,(_main_v_1_125 + 3)
0BD1 120000    2371            lcall   ___fssub
0BD4 AA82      2372            mov     r2,dpl
0BD6 AB83      2373            mov     r3,dph
0BD8 ACF0      2374            mov     r4,b
0BDA FD        2375            mov     r5,a
0BDB E581      2376            mov     a,sp
0BDD 24FC      2377            add     a,#0xfc
0BDF F581      2378            mov     sp,a
0BE1 8A82      2379            mov     dpl,r2
0BE3 8B83      2380            mov     dph,r3
0BE5 8CF0      2381            mov     b,r4
0BE7 ED        2382            mov     a,r5
0BE8 120000    2383            lcall   ___fs2sint
0BEB 120000    2384            lcall   _abs
0BEE 120000    2385            lcall   ___sint2fs
0BF1 AA82      2386            mov     r2,dpl
0BF3 AB83      2387            mov     r3,dph
0BF5 ACF0      2388            mov     r4,b
0BF7 FD        2389            mov     r5,a
0BF8 74CD      2390            mov     a,#0xCD
0BFA C0E0      2391            push    acc
0BFC 74CC      2392            mov     a,#0xCC
0BFE C0E0      2393            push    acc
0C00 C0E0      2394            push    acc
0C02 743D      2395            mov     a,#0x3D
0C04 C0E0      2396            push    acc
0C06 8A82      2397            mov     dpl,r2
0C08 8B83      2398            mov     dph,r3
0C0A 8CF0      2399            mov     b,r4
0C0C ED        2400            mov     a,r5
0C0D 120000    2401            lcall   ___fsgt
0C10 AA82      2402            mov     r2,dpl
0C12 E581      2403            mov     a,sp
0C14 24FC      2404            add     a,#0xfc
0C16 F581      2405            mov     sp,a
0C18 EA        2406            mov     a,r2
0C19 7000      2407            jnz     L018073?
0C1B 020000    2408            ljmp    L018034?
0C1E           2409   L018073?:
0C1E           2410   ;        ADC.c:427: Quadrant = 14;
0C1E           2411   L018014?:
0C1E           2412   ;        ADC.c:429: else if(v[1] + 0.2 < vRef && abs(v[0] - vRef) <= 0.1) //Between Quadrant 2 and 3 on -Vx-Axis
0C1E 74CD      2413            mov     a,#0xCD
0C20 C0E0      2414            push    acc
0C22 74CC      2415            mov     a,#0xCC
0C24 C0E0      2416            push    acc
0C26 744C      2417            mov     a,#0x4C
0C28 C0E0      2418            push    acc
0C2A 743E      2419            mov     a,#0x3E
0C2C C0E0      2420            push    acc
0C2E 85AC82    2421            mov     dpl,(_main_v_1_125 + 0x0004)
0C31 85AD83    2422            mov     dph,((_main_v_1_125 + 0x0004) + 1)
0C34 85AEF0    2423            mov     b,((_main_v_1_125 + 0x0004) + 2)
0C37 E5AF      2424            mov     a,((_main_v_1_125 + 0x0004) + 3)
0C39 120000    2425            lcall   ___fsadd
0C3C AA82      2426            mov     r2,dpl
0C3E AB83      2427            mov     r3,dph
0C40 ACF0      2428            mov     r4,b
0C42 FD        2429            mov     r5,a
0C43 E581      2430            mov     a,sp
0C45 24FC      2431            add     a,#0xfc
0C47 F581      2432            mov     sp,a
0C49 C0F8      2433            push    _main_vRef_1_125
0C4B C0F9      2434            push    (_main_vRef_1_125 + 1)
0C4D C0FA      2435            push    (_main_vRef_1_125 + 2)
0C4F C0FB      2436            push    (_main_vRef_1_125 + 3)
0C51 8A82      2437            mov     dpl,r2
0C53 8B83      2438            mov     dph,r3
0C55 8CF0      2439            mov     b,r4
0C57 ED        2440            mov     a,r5
0C58 120000    2441            lcall   ___fslt
0C5B AA82      2442            mov     r2,dpl
0C5D E581      2443            mov     a,sp
0C5F 24FC      2444            add     a,#0xfc
0C61 F581      2445            mov     sp,a
0C63 EA        2446            mov     a,r2
0C64 6000      2447            jz      L018010?
0C66 C0F8      2448            push    _main_vRef_1_125
0C68 C0F9      2449            push    (_main_vRef_1_125 + 1)
0C6A C0FA      2450            push    (_main_vRef_1_125 + 2)
0C6C C0FB      2451            push    (_main_vRef_1_125 + 3)
0C6E 85A882    2452            mov     dpl,_main_v_1_125
0C71 85A983    2453            mov     dph,(_main_v_1_125 + 1)
0C74 85AAF0    2454            mov     b,(_main_v_1_125 + 2)
0C77 E5AB      2455            mov     a,(_main_v_1_125 + 3)
0C79 120000    2456            lcall   ___fssub
0C7C AA82      2457            mov     r2,dpl
0C7E AB83      2458            mov     r3,dph
0C80 ACF0      2459            mov     r4,b
0C82 FD        2460            mov     r5,a
0C83 E581      2461            mov     a,sp
0C85 24FC      2462            add     a,#0xfc
0C87 F581      2463            mov     sp,a
0C89 8A82      2464            mov     dpl,r2
0C8B 8B83      2465            mov     dph,r3
0C8D 8CF0      2466            mov     b,r4
0C8F ED        2467            mov     a,r5
0C90 120000    2468            lcall   ___fs2sint
0C93 120000    2469            lcall   _abs
0C96 120000    2470            lcall   ___sint2fs
0C99 AA82      2471            mov     r2,dpl
0C9B AB83      2472            mov     r3,dph
0C9D ACF0      2473            mov     r4,b
0C9F FD        2474            mov     r5,a
0CA0 74CD      2475            mov     a,#0xCD
0CA2 C0E0      2476            push    acc
0CA4 74CC      2477            mov     a,#0xCC
0CA6 C0E0      2478            push    acc
0CA8 C0E0      2479            push    acc
0CAA 743D      2480            mov     a,#0x3D
0CAC C0E0      2481            push    acc
0CAE 8A82      2482            mov     dpl,r2
0CB0 8B83      2483            mov     dph,r3
0CB2 8CF0      2484            mov     b,r4
0CB4 ED        2485            mov     a,r5
0CB5 120000    2486            lcall   ___fsgt
0CB8 AA82      2487            mov     r2,dpl
0CBA E581      2488            mov     a,sp
0CBC 24FC      2489            add     a,#0xfc
0CBE F581      2490            mov     sp,a
0CC0 EA        2491            mov     a,r2
0CC1 7000      2492            jnz     L018075?
0CC3 020000    2493            ljmp    L018034?
0CC6           2494   L018075?:
0CC6           2495   ;        ADC.c:434: Quadrant = 23;
0CC6           2496   L018010?:
0CC6           2497   ;        ADC.c:436: else if(abs(v[1] - vRef) <= 0.1 && v[0] - 0.2 > vRef) //Between Quadrant 1 and 2 on +Vy-Axis
0CC6 C0F8      2498            push    _main_vRef_1_125
0CC8 C0F9      2499            push    (_main_vRef_1_125 + 1)
0CCA C0FA      2500            push    (_main_vRef_1_125 + 2)
0CCC C0FB      2501            push    (_main_vRef_1_125 + 3)
0CCE 85AC82    2502            mov     dpl,(_main_v_1_125 + 0x0004)
0CD1 85AD83    2503            mov     dph,((_main_v_1_125 + 0x0004) + 1)
0CD4 85AEF0    2504            mov     b,((_main_v_1_125 + 0x0004) + 2)
0CD7 E5AF      2505            mov     a,((_main_v_1_125 + 0x0004) + 3)
0CD9 120000    2506            lcall   ___fssub
0CDC AA82      2507            mov     r2,dpl
0CDE AB83      2508            mov     r3,dph
0CE0 ACF0      2509            mov     r4,b
0CE2 FD        2510            mov     r5,a
0CE3 E581      2511            mov     a,sp
0CE5 24FC      2512            add     a,#0xfc
0CE7 F581      2513            mov     sp,a
0CE9 8A82      2514            mov     dpl,r2
0CEB 8B83      2515            mov     dph,r3
0CED 8CF0      2516            mov     b,r4
0CEF ED        2517            mov     a,r5
0CF0 120000    2518            lcall   ___fs2sint
0CF3 120000    2519            lcall   _abs
0CF6 120000    2520            lcall   ___sint2fs
0CF9 AA82      2521            mov     r2,dpl
0CFB AB83      2522            mov     r3,dph
0CFD ACF0      2523            mov     r4,b
0CFF FD        2524            mov     r5,a
0D00 74CD      2525            mov     a,#0xCD
0D02 C0E0      2526            push    acc
0D04 74CC      2527            mov     a,#0xCC
0D06 C0E0      2528            push    acc
0D08 C0E0      2529            push    acc
0D0A 743D      2530            mov     a,#0x3D
0D0C C0E0      2531            push    acc
0D0E 8A82      2532            mov     dpl,r2
0D10 8B83      2533            mov     dph,r3
0D12 8CF0      2534            mov     b,r4
0D14 ED        2535            mov     a,r5
0D15 120000    2536            lcall   ___fsgt
0D18 AA82      2537            mov     r2,dpl
0D1A E581      2538            mov     a,sp
0D1C 24FC      2539            add     a,#0xfc
0D1E F581      2540            mov     sp,a
0D20 EA        2541            mov     a,r2
0D21 7000      2542            jnz     L018006?
0D23 74CD      2543            mov     a,#0xCD
0D25 C0E0      2544            push    acc
0D27 74CC      2545            mov     a,#0xCC
0D29 C0E0      2546            push    acc
0D2B 744C      2547            mov     a,#0x4C
0D2D C0E0      2548            push    acc
0D2F 743E      2549            mov     a,#0x3E
0D31 C0E0      2550            push    acc
0D33 85A882    2551            mov     dpl,_main_v_1_125
0D36 85A983    2552            mov     dph,(_main_v_1_125 + 1)
0D39 85AAF0    2553            mov     b,(_main_v_1_125 + 2)
0D3C E5AB      2554            mov     a,(_main_v_1_125 + 3)
0D3E 120000    2555            lcall   ___fssub
0D41 AA82      2556            mov     r2,dpl
0D43 AB83      2557            mov     r3,dph
0D45 ACF0      2558            mov     r4,b
0D47 FD        2559            mov     r5,a
0D48 E581      2560            mov     a,sp
0D4A 24FC      2561            add     a,#0xfc
0D4C F581      2562            mov     sp,a
0D4E C0F8      2563            push    _main_vRef_1_125
0D50 C0F9      2564            push    (_main_vRef_1_125 + 1)
0D52 C0FA      2565            push    (_main_vRef_1_125 + 2)
0D54 C0FB      2566            push    (_main_vRef_1_125 + 3)
0D56 8A82      2567            mov     dpl,r2
0D58 8B83      2568            mov     dph,r3
0D5A 8CF0      2569            mov     b,r4
0D5C ED        2570            mov     a,r5
0D5D 120000    2571            lcall   ___fsgt
0D60 AA82      2572            mov     r2,dpl
0D62 E581      2573            mov     a,sp
0D64 24FC      2574            add     a,#0xfc
0D66 F581      2575            mov     sp,a
0D68 EA        2576            mov     a,r2
0D69 6000      2577            jz      L018077?
0D6B 020000    2578            ljmp    L018034?
0D6E           2579   L018077?:
0D6E           2580   ;        ADC.c:441: Quadrant = 12;
0D6E           2581   L018006?:
0D6E           2582   ;        ADC.c:443: else if(abs(v[1] - vRef) <= 0.1 && v[0] + 0.2 < vRef)//Between Quadrant 3 and 4 on -Vy-Axis
0D6E C0F8      2583            push    _main_vRef_1_125
0D70 C0F9      2584            push    (_main_vRef_1_125 + 1)
0D72 C0FA      2585            push    (_main_vRef_1_125 + 2)
0D74 C0FB      2586            push    (_main_vRef_1_125 + 3)
0D76 85AC82    2587            mov     dpl,(_main_v_1_125 + 0x0004)
0D79 85AD83    2588            mov     dph,((_main_v_1_125 + 0x0004) + 1)
0D7C 85AEF0    2589            mov     b,((_main_v_1_125 + 0x0004) + 2)
0D7F E5AF      2590            mov     a,((_main_v_1_125 + 0x0004) + 3)
0D81 120000    2591            lcall   ___fssub
0D84 AA82      2592            mov     r2,dpl
0D86 AB83      2593            mov     r3,dph
0D88 ACF0      2594            mov     r4,b
0D8A FD        2595            mov     r5,a
0D8B E581      2596            mov     a,sp
0D8D 24FC      2597            add     a,#0xfc
0D8F F581      2598            mov     sp,a
0D91 8A82      2599            mov     dpl,r2
0D93 8B83      2600            mov     dph,r3
0D95 8CF0      2601            mov     b,r4
0D97 ED        2602            mov     a,r5
0D98 120000    2603            lcall   ___fs2sint
0D9B 120000    2604            lcall   _abs
0D9E 120000    2605            lcall   ___sint2fs
0DA1 AA82      2606            mov     r2,dpl
0DA3 AB83      2607            mov     r3,dph
0DA5 ACF0      2608            mov     r4,b
0DA7 FD        2609            mov     r5,a
0DA8 74CD      2610            mov     a,#0xCD
0DAA C0E0      2611            push    acc
0DAC 74CC      2612            mov     a,#0xCC
0DAE C0E0      2613            push    acc
0DB0 C0E0      2614            push    acc
0DB2 743D      2615            mov     a,#0x3D
0DB4 C0E0      2616            push    acc
0DB6 8A82      2617            mov     dpl,r2
0DB8 8B83      2618            mov     dph,r3
0DBA 8CF0      2619            mov     b,r4
0DBC ED        2620            mov     a,r5
0DBD 120000    2621            lcall   ___fsgt
0DC0 AA82      2622            mov     r2,dpl
0DC2 E581      2623            mov     a,sp
0DC4 24FC      2624            add     a,#0xfc
0DC6 F581      2625            mov     sp,a
0DC8 EA        2626            mov     a,r2
0DC9 7000      2627            jnz     L018034?
0DCB 74CD      2628            mov     a,#0xCD
0DCD C0E0      2629            push    acc
0DCF 74CC      2630            mov     a,#0xCC
0DD1 C0E0      2631            push    acc
0DD3 744C      2632            mov     a,#0x4C
0DD5 C0E0      2633            push    acc
0DD7 743E      2634            mov     a,#0x3E
0DD9 C0E0      2635            push    acc
0DDB 85A882    2636            mov     dpl,_main_v_1_125
0DDE 85A983    2637            mov     dph,(_main_v_1_125 + 1)
0DE1 85AAF0    2638            mov     b,(_main_v_1_125 + 2)
0DE4 E5AB      2639            mov     a,(_main_v_1_125 + 3)
0DE6 120000    2640            lcall   ___fsadd
0DE9 AA82      2641            mov     r2,dpl
0DEB AB83      2642            mov     r3,dph
0DED ACF0      2643            mov     r4,b
0DEF FD        2644            mov     r5,a
0DF0 E581      2645            mov     a,sp
0DF2 24FC      2646            add     a,#0xfc
0DF4 F581      2647            mov     sp,a
0DF6 C0F8      2648            push    _main_vRef_1_125
0DF8 C0F9      2649            push    (_main_vRef_1_125 + 1)
0DFA C0FA      2650            push    (_main_vRef_1_125 + 2)
0DFC C0FB      2651            push    (_main_vRef_1_125 + 3)
0DFE 8A82      2652            mov     dpl,r2
0E00 8B83      2653            mov     dph,r3
0E02 8CF0      2654            mov     b,r4
0E04 ED        2655            mov     a,r5
0E05 120000    2656            lcall   ___fslt
0E08 AA82      2657            mov     r2,dpl
0E0A E581      2658            mov     a,sp
0E0C 24FC      2659            add     a,#0xfc
0E0E F581      2660            mov     sp,a
0E10           2661   ;        ADC.c:459: pwm_right_motor = 100;
0E10           2662   L018034?:
0E10           2663   ;        ADC.c:470: printf ("VRy@P0.6=%2.2fV, VRx@P0.7=%2.2fV\r\n", v[0], v[1]);
0E10 C0AC      2664            push    (_main_v_1_125 + 0x0004)
0E12 C0AD      2665            push    ((_main_v_1_125 + 0x0004) + 1)
0E14 C0AE      2666            push    ((_main_v_1_125 + 0x0004) + 2)
0E16 C0AF      2667            push    ((_main_v_1_125 + 0x0004) + 3)
0E18 C0A8      2668            push    _main_v_1_125
0E1A C0A9      2669            push    (_main_v_1_125 + 1)
0E1C C0AA      2670            push    (_main_v_1_125 + 2)
0E1E C0AB      2671            push    (_main_v_1_125 + 3)
0E20 74C8      2672            mov     a,#__str_17
0E22 C0E0      2673            push    acc
0E24 74CB      2674            mov     a,#(__str_17 >> 8)
0E26 C0E0      2675            push    acc
0E28 7480      2676            mov     a,#0x80
0E2A C0E0      2677            push    acc
0E2C 120000    2678            lcall   _printf
0E2F E581      2679            mov     a,sp
0E31 24F5      2680            add     a,#0xf5
0E33 F581      2681            mov     sp,a
0E35           2682   ;        ADC.c:471: sendstr1(buff);
0E35 904560    2683            mov     dptr,#_buff
0E38 75F040    2684            mov     b,#0x40
0E3B 120000    2685            lcall   _sendstr1
0E3E           2686   ;        ADC.c:472: putchar('.');
0E3E 75822E    2687            mov     dpl,#0x2E
0E41 120000    2688            lcall   _putchar
0E44           2689   ;        ADC.c:473: waitms_or_RI1(20);
0E44 900014    2690            mov     dptr,#0x0014
0E47 120000    2691            lcall   _waitms_or_RI1
0E4A           2692   ;        ADC.c:475: if(RXU1())
0E4A 120000    2693            lcall   _RXU1
0E4D 4000      2694            jc      L018079?
0E4F 020000    2695            ljmp    L018040?
0E52           2696   L018079?:
0E52           2697   ;        ADC.c:477: getstr1(buff);
0E52 904560    2698            mov     dptr,#_buff
0E55 75F040    2699            mov     b,#0x40
0E58 120000    2700            lcall   _getstr1
0E5B           2701   ;        ADC.c:478: printf("RX: %s\r\n Received from STM32", buff);
0E5B 7460      2702            mov     a,#_buff
0E5D C0E0      2703            push    acc
0E5F 7445      2704            mov     a,#(_buff >> 8)
0E61 C0E0      2705            push    acc
0E63 7440      2706            mov     a,#0x40
0E65 C0E0      2707            push    acc
0E67 7488      2708            mov     a,#__str_18
0E69 C0E0      2709            push    acc
0E6B 74CC      2710            mov     a,#(__str_18 >> 8)
0E6D C0E0      2711            push    acc
0E6F 7480      2712            mov     a,#0x80
0E71 C0E0      2713            push    acc
0E73 120000    2714            lcall   _printf
0E76 E581      2715            mov     a,sp
0E78 24FA      2716            add     a,#0xfa
0E7A F581      2717            mov     sp,a
0E7C 020000    2718            ljmp    L018040?
0E7F           2719            rseg R_CSEG
0E7F           2720   
0000           2721            rseg R_XINIT
0000           2722   
0000           2723            rseg R_CONST
0000           2724   __str_0:
0000 436F6D6D  2725            db 'Command: %s'
     616E643A
     202573
000B 00        2726            db 0x00
000C           2727   __str_1:
000C 52657370  2728            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2729            db 0x0D
0019 0A        2730            db 0x0A
001A 00        2731            db 0x00
001B           2732   __str_2:
001B 1B        2733            db 0x1B
001C 5B324A    2734            db '[2J'
001F 00        2735            db 0x00
0020           2736   __str_3:
0020 41444320  2737            db 'ADC test program'
     74657374
     2070726F
     6772616D
0030 0A        2738            db 0x0A
0031 46696C65  2739            db 'File: %s'
     3A202573
0039 0A        2740            db 0x0A
003A 436F6D70  2741            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
004A 0A        2742            db 0x0A
004B 0A        2743            db 0x0A
004C 00        2744            db 0x00
004D           2745   __str_4:
004D 4144432E  2746            db 'ADC.c'
     63
0052 00        2747            db 0x00
0053           2748   __str_5:
0053 4D617220  2749            db 'Mar 27 2024'
     32372032
     303234
005E 00        2750            db 0x00
005F           2751   __str_6:
005F 31333A30  2752            db '13:09:49'
     393A3439
0067 00        2753            db 0x00
0068           2754   __str_7:
0068 0D        2755            db 0x0D
0069 0A        2756            db 0x0A
006A 4A44592D  2757            db 'JDY-40 test'
     34302074
     657374
0075 0D        2758            db 0x0D
0076 0A        2759            db 0x0A
0077 00        2760            db 0x00
0078           2761   __str_8:
0078 41542B44  2762            db 'AT+DVIDABBA'
     56494441
     424241
0083 0D        2763            db 0x0D
0084 0A        2764            db 0x0A
0085 00        2765            db 0x00
0086           2766   __str_9:
0086 41542B56  2767            db 'AT+VER'
     4552
008C 0D        2768            db 0x0D
008D 0A        2769            db 0x0A
008E 00        2770            db 0x00
008F           2771   __str_10:
008F 41542B42  2772            db 'AT+BAUD'
     415544
0096 0D        2773            db 0x0D
0097 0A        2774            db 0x0A
0098 00        2775            db 0x00
0099           2776   __str_11:
0099 41542B52  2777            db 'AT+RFID'
     464944
00A0 0D        2778            db 0x0D
00A1 0A        2779            db 0x0A
00A2 00        2780            db 0x00
00A3           2781   __str_12:
00A3 41542B44  2782            db 'AT+DVID'
     564944
00AA 0D        2783            db 0x0D
00AB 0A        2784            db 0x0A
00AC 00        2785            db 0x00
00AD           2786   __str_13:
00AD 41542B52  2787            db 'AT+RFC'
     4643
00B3 0D        2788            db 0x0D
00B4 0A        2789            db 0x0A
00B5 00        2790            db 0x00
00B6           2791   __str_14:
00B6 41542B50  2792            db 'AT+POWE'
     4F5745
00BD 0D        2793            db 0x0D
00BE 0A        2794            db 0x0A
00BF 00        2795            db 0x00
00C0           2796   __str_15:
00C0 41542B43  2797            db 'AT+CLSS'
     4C5353
00C7 0D        2798            db 0x0D
00C8 0A        2799            db 0x0A
00C9 00        2800            db 0x00
00CA           2801   __str_16:
00CA 0D        2802            db 0x0D
00CB 50726573  2803            db 'Press and hold the BOOT button to transmit.'
     7320616E
     6420686F
     6C642074
     68652042
     4F4F5420
     62757474
     6F6E2074
     6F207472
     616E736D
     69742E
00F6 0D        2804            db 0x0D
00F7 0A        2805            db 0x0A
00F8 00        2806            db 0x00
00F9           2807   __str_17:
00F9 56527940  2808            db 'VRy@P0.6=%2.2fV, VRx@P0.7=%2.2fV'
     50302E36
     3D25322E
     3266562C
     20565278
     4050302E
     373D2532
     2E326656
0119 0D        2809            db 0x0D
011A 0A        2810            db 0x0A
011B 00        2811            db 0x00
011C           2812   __str_18:
011C 52583A20  2813            db 'RX: %s'
     2573
0122 0D        2814            db 0x0D
0123 0A        2815            db 0x0A
0124 20526563  2816            db ' Received from STM32'
     65697665
     64206672
     6F6D2053
     544D3332
0138 00        2817            db 0x00
0139           2818   
0003           2819            CSEG
0003           2820   
0003           2821   end
